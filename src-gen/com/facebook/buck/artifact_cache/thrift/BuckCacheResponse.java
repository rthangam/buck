/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.artifact_cache.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class BuckCacheResponse implements org.apache.thrift.TBase<BuckCacheResponse, BuckCacheResponse._Fields>, java.io.Serializable, Cloneable, Comparable<BuckCacheResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BuckCacheResponse");

  private static final org.apache.thrift.protocol.TField WAS_SUCCESSFUL_FIELD_DESC = new org.apache.thrift.protocol.TField("wasSuccessful", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMessage", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DIAGNOSTIC_SERVER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("diagnosticServerInfo", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField PAYLOADS_FIELD_DESC = new org.apache.thrift.protocol.TField("payloads", org.apache.thrift.protocol.TType.LIST, (short)100);
  private static final org.apache.thrift.protocol.TField FETCH_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchResponse", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField STORE_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("storeResponse", org.apache.thrift.protocol.TType.STRUCT, (short)102);
  private static final org.apache.thrift.protocol.TField MULTI_FETCH_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiFetchResponse", org.apache.thrift.protocol.TType.STRUCT, (short)103);
  private static final org.apache.thrift.protocol.TField DELETE_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("deleteResponse", org.apache.thrift.protocol.TType.STRUCT, (short)105);
  private static final org.apache.thrift.protocol.TField MULTI_CONTAINS_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiContainsResponse", org.apache.thrift.protocol.TType.STRUCT, (short)107);
  private static final org.apache.thrift.protocol.TField MANIFEST_APPEND_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("manifestAppendResponse", org.apache.thrift.protocol.TType.STRUCT, (short)108);
  private static final org.apache.thrift.protocol.TField MANIFEST_FETCH_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("manifestFetchResponse", org.apache.thrift.protocol.TType.STRUCT, (short)109);
  private static final org.apache.thrift.protocol.TField MANIFEST_DELETE_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("manifestDeleteResponse", org.apache.thrift.protocol.TType.STRUCT, (short)110);
  private static final org.apache.thrift.protocol.TField MANIFEST_SET_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("manifestSetResponse", org.apache.thrift.protocol.TType.STRUCT, (short)111);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BuckCacheResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BuckCacheResponseTupleSchemeFactory();

  public boolean wasSuccessful; // optional
  public java.lang.String errorMessage; // optional
  /**
   * 
   * @see BuckCacheRequestType
   */
  public BuckCacheRequestType type; // optional
  public java.lang.String diagnosticServerInfo; // optional
  public java.util.List<PayloadInfo> payloads; // optional
  public BuckCacheFetchResponse fetchResponse; // optional
  public BuckCacheStoreResponse storeResponse; // optional
  public BuckCacheMultiFetchResponse multiFetchResponse; // optional
  public BuckCacheDeleteResponse deleteResponse; // optional
  public BuckCacheMultiContainsResponse multiContainsResponse; // optional
  public ManifestAppendResponse manifestAppendResponse; // optional
  public ManifestFetchResponse manifestFetchResponse; // optional
  public ManifestDeleteResponse manifestDeleteResponse; // optional
  public ManifestSetResponse manifestSetResponse; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WAS_SUCCESSFUL((short)1, "wasSuccessful"),
    ERROR_MESSAGE((short)2, "errorMessage"),
    /**
     * 
     * @see BuckCacheRequestType
     */
    TYPE((short)10, "type"),
    DIAGNOSTIC_SERVER_INFO((short)31, "diagnosticServerInfo"),
    PAYLOADS((short)100, "payloads"),
    FETCH_RESPONSE((short)101, "fetchResponse"),
    STORE_RESPONSE((short)102, "storeResponse"),
    MULTI_FETCH_RESPONSE((short)103, "multiFetchResponse"),
    DELETE_RESPONSE((short)105, "deleteResponse"),
    MULTI_CONTAINS_RESPONSE((short)107, "multiContainsResponse"),
    MANIFEST_APPEND_RESPONSE((short)108, "manifestAppendResponse"),
    MANIFEST_FETCH_RESPONSE((short)109, "manifestFetchResponse"),
    MANIFEST_DELETE_RESPONSE((short)110, "manifestDeleteResponse"),
    MANIFEST_SET_RESPONSE((short)111, "manifestSetResponse");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WAS_SUCCESSFUL
          return WAS_SUCCESSFUL;
        case 2: // ERROR_MESSAGE
          return ERROR_MESSAGE;
        case 10: // TYPE
          return TYPE;
        case 31: // DIAGNOSTIC_SERVER_INFO
          return DIAGNOSTIC_SERVER_INFO;
        case 100: // PAYLOADS
          return PAYLOADS;
        case 101: // FETCH_RESPONSE
          return FETCH_RESPONSE;
        case 102: // STORE_RESPONSE
          return STORE_RESPONSE;
        case 103: // MULTI_FETCH_RESPONSE
          return MULTI_FETCH_RESPONSE;
        case 105: // DELETE_RESPONSE
          return DELETE_RESPONSE;
        case 107: // MULTI_CONTAINS_RESPONSE
          return MULTI_CONTAINS_RESPONSE;
        case 108: // MANIFEST_APPEND_RESPONSE
          return MANIFEST_APPEND_RESPONSE;
        case 109: // MANIFEST_FETCH_RESPONSE
          return MANIFEST_FETCH_RESPONSE;
        case 110: // MANIFEST_DELETE_RESPONSE
          return MANIFEST_DELETE_RESPONSE;
        case 111: // MANIFEST_SET_RESPONSE
          return MANIFEST_SET_RESPONSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WASSUCCESSFUL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.WAS_SUCCESSFUL,_Fields.ERROR_MESSAGE,_Fields.TYPE,_Fields.DIAGNOSTIC_SERVER_INFO,_Fields.PAYLOADS,_Fields.FETCH_RESPONSE,_Fields.STORE_RESPONSE,_Fields.MULTI_FETCH_RESPONSE,_Fields.DELETE_RESPONSE,_Fields.MULTI_CONTAINS_RESPONSE,_Fields.MANIFEST_APPEND_RESPONSE,_Fields.MANIFEST_FETCH_RESPONSE,_Fields.MANIFEST_DELETE_RESPONSE,_Fields.MANIFEST_SET_RESPONSE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WAS_SUCCESSFUL, new org.apache.thrift.meta_data.FieldMetaData("wasSuccessful", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("errorMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, BuckCacheRequestType.class)));
    tmpMap.put(_Fields.DIAGNOSTIC_SERVER_INFO, new org.apache.thrift.meta_data.FieldMetaData("diagnosticServerInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYLOADS, new org.apache.thrift.meta_data.FieldMetaData("payloads", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PayloadInfo.class))));
    tmpMap.put(_Fields.FETCH_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("fetchResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuckCacheFetchResponse.class)));
    tmpMap.put(_Fields.STORE_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("storeResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuckCacheStoreResponse.class)));
    tmpMap.put(_Fields.MULTI_FETCH_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("multiFetchResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuckCacheMultiFetchResponse.class)));
    tmpMap.put(_Fields.DELETE_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("deleteResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuckCacheDeleteResponse.class)));
    tmpMap.put(_Fields.MULTI_CONTAINS_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("multiContainsResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuckCacheMultiContainsResponse.class)));
    tmpMap.put(_Fields.MANIFEST_APPEND_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("manifestAppendResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ManifestAppendResponse.class)));
    tmpMap.put(_Fields.MANIFEST_FETCH_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("manifestFetchResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ManifestFetchResponse.class)));
    tmpMap.put(_Fields.MANIFEST_DELETE_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("manifestDeleteResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ManifestDeleteResponse.class)));
    tmpMap.put(_Fields.MANIFEST_SET_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("manifestSetResponse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ManifestSetResponse.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BuckCacheResponse.class, metaDataMap);
  }

  public BuckCacheResponse() {
    this.type = com.facebook.buck.artifact_cache.thrift.BuckCacheRequestType.UNKNOWN;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BuckCacheResponse(BuckCacheResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.wasSuccessful = other.wasSuccessful;
    if (other.isSetErrorMessage()) {
      this.errorMessage = other.errorMessage;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetDiagnosticServerInfo()) {
      this.diagnosticServerInfo = other.diagnosticServerInfo;
    }
    if (other.isSetPayloads()) {
      java.util.List<PayloadInfo> __this__payloads = new java.util.ArrayList<PayloadInfo>(other.payloads.size());
      for (PayloadInfo other_element : other.payloads) {
        __this__payloads.add(new PayloadInfo(other_element));
      }
      this.payloads = __this__payloads;
    }
    if (other.isSetFetchResponse()) {
      this.fetchResponse = new BuckCacheFetchResponse(other.fetchResponse);
    }
    if (other.isSetStoreResponse()) {
      this.storeResponse = new BuckCacheStoreResponse(other.storeResponse);
    }
    if (other.isSetMultiFetchResponse()) {
      this.multiFetchResponse = new BuckCacheMultiFetchResponse(other.multiFetchResponse);
    }
    if (other.isSetDeleteResponse()) {
      this.deleteResponse = new BuckCacheDeleteResponse(other.deleteResponse);
    }
    if (other.isSetMultiContainsResponse()) {
      this.multiContainsResponse = new BuckCacheMultiContainsResponse(other.multiContainsResponse);
    }
    if (other.isSetManifestAppendResponse()) {
      this.manifestAppendResponse = new ManifestAppendResponse(other.manifestAppendResponse);
    }
    if (other.isSetManifestFetchResponse()) {
      this.manifestFetchResponse = new ManifestFetchResponse(other.manifestFetchResponse);
    }
    if (other.isSetManifestDeleteResponse()) {
      this.manifestDeleteResponse = new ManifestDeleteResponse(other.manifestDeleteResponse);
    }
    if (other.isSetManifestSetResponse()) {
      this.manifestSetResponse = new ManifestSetResponse(other.manifestSetResponse);
    }
  }

  public BuckCacheResponse deepCopy() {
    return new BuckCacheResponse(this);
  }

  @Override
  public void clear() {
    setWasSuccessfulIsSet(false);
    this.wasSuccessful = false;
    this.errorMessage = null;
    this.type = com.facebook.buck.artifact_cache.thrift.BuckCacheRequestType.UNKNOWN;

    this.diagnosticServerInfo = null;
    this.payloads = null;
    this.fetchResponse = null;
    this.storeResponse = null;
    this.multiFetchResponse = null;
    this.deleteResponse = null;
    this.multiContainsResponse = null;
    this.manifestAppendResponse = null;
    this.manifestFetchResponse = null;
    this.manifestDeleteResponse = null;
    this.manifestSetResponse = null;
  }

  public boolean isWasSuccessful() {
    return this.wasSuccessful;
  }

  public BuckCacheResponse setWasSuccessful(boolean wasSuccessful) {
    this.wasSuccessful = wasSuccessful;
    setWasSuccessfulIsSet(true);
    return this;
  }

  public void unsetWasSuccessful() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WASSUCCESSFUL_ISSET_ID);
  }

  /** Returns true if field wasSuccessful is set (has been assigned a value) and false otherwise */
  public boolean isSetWasSuccessful() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WASSUCCESSFUL_ISSET_ID);
  }

  public void setWasSuccessfulIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WASSUCCESSFUL_ISSET_ID, value);
  }

  public java.lang.String getErrorMessage() {
    return this.errorMessage;
  }

  public BuckCacheResponse setErrorMessage(java.lang.String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  public void unsetErrorMessage() {
    this.errorMessage = null;
  }

  /** Returns true if field errorMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMessage() {
    return this.errorMessage != null;
  }

  public void setErrorMessageIsSet(boolean value) {
    if (!value) {
      this.errorMessage = null;
    }
  }

  /**
   * 
   * @see BuckCacheRequestType
   */
  public BuckCacheRequestType getType() {
    return this.type;
  }

  /**
   * 
   * @see BuckCacheRequestType
   */
  public BuckCacheResponse setType(BuckCacheRequestType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getDiagnosticServerInfo() {
    return this.diagnosticServerInfo;
  }

  public BuckCacheResponse setDiagnosticServerInfo(java.lang.String diagnosticServerInfo) {
    this.diagnosticServerInfo = diagnosticServerInfo;
    return this;
  }

  public void unsetDiagnosticServerInfo() {
    this.diagnosticServerInfo = null;
  }

  /** Returns true if field diagnosticServerInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetDiagnosticServerInfo() {
    return this.diagnosticServerInfo != null;
  }

  public void setDiagnosticServerInfoIsSet(boolean value) {
    if (!value) {
      this.diagnosticServerInfo = null;
    }
  }

  public int getPayloadsSize() {
    return (this.payloads == null) ? 0 : this.payloads.size();
  }

  public java.util.Iterator<PayloadInfo> getPayloadsIterator() {
    return (this.payloads == null) ? null : this.payloads.iterator();
  }

  public void addToPayloads(PayloadInfo elem) {
    if (this.payloads == null) {
      this.payloads = new java.util.ArrayList<PayloadInfo>();
    }
    this.payloads.add(elem);
  }

  public java.util.List<PayloadInfo> getPayloads() {
    return this.payloads;
  }

  public BuckCacheResponse setPayloads(java.util.List<PayloadInfo> payloads) {
    this.payloads = payloads;
    return this;
  }

  public void unsetPayloads() {
    this.payloads = null;
  }

  /** Returns true if field payloads is set (has been assigned a value) and false otherwise */
  public boolean isSetPayloads() {
    return this.payloads != null;
  }

  public void setPayloadsIsSet(boolean value) {
    if (!value) {
      this.payloads = null;
    }
  }

  public BuckCacheFetchResponse getFetchResponse() {
    return this.fetchResponse;
  }

  public BuckCacheResponse setFetchResponse(BuckCacheFetchResponse fetchResponse) {
    this.fetchResponse = fetchResponse;
    return this;
  }

  public void unsetFetchResponse() {
    this.fetchResponse = null;
  }

  /** Returns true if field fetchResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchResponse() {
    return this.fetchResponse != null;
  }

  public void setFetchResponseIsSet(boolean value) {
    if (!value) {
      this.fetchResponse = null;
    }
  }

  public BuckCacheStoreResponse getStoreResponse() {
    return this.storeResponse;
  }

  public BuckCacheResponse setStoreResponse(BuckCacheStoreResponse storeResponse) {
    this.storeResponse = storeResponse;
    return this;
  }

  public void unsetStoreResponse() {
    this.storeResponse = null;
  }

  /** Returns true if field storeResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreResponse() {
    return this.storeResponse != null;
  }

  public void setStoreResponseIsSet(boolean value) {
    if (!value) {
      this.storeResponse = null;
    }
  }

  public BuckCacheMultiFetchResponse getMultiFetchResponse() {
    return this.multiFetchResponse;
  }

  public BuckCacheResponse setMultiFetchResponse(BuckCacheMultiFetchResponse multiFetchResponse) {
    this.multiFetchResponse = multiFetchResponse;
    return this;
  }

  public void unsetMultiFetchResponse() {
    this.multiFetchResponse = null;
  }

  /** Returns true if field multiFetchResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiFetchResponse() {
    return this.multiFetchResponse != null;
  }

  public void setMultiFetchResponseIsSet(boolean value) {
    if (!value) {
      this.multiFetchResponse = null;
    }
  }

  public BuckCacheDeleteResponse getDeleteResponse() {
    return this.deleteResponse;
  }

  public BuckCacheResponse setDeleteResponse(BuckCacheDeleteResponse deleteResponse) {
    this.deleteResponse = deleteResponse;
    return this;
  }

  public void unsetDeleteResponse() {
    this.deleteResponse = null;
  }

  /** Returns true if field deleteResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteResponse() {
    return this.deleteResponse != null;
  }

  public void setDeleteResponseIsSet(boolean value) {
    if (!value) {
      this.deleteResponse = null;
    }
  }

  public BuckCacheMultiContainsResponse getMultiContainsResponse() {
    return this.multiContainsResponse;
  }

  public BuckCacheResponse setMultiContainsResponse(BuckCacheMultiContainsResponse multiContainsResponse) {
    this.multiContainsResponse = multiContainsResponse;
    return this;
  }

  public void unsetMultiContainsResponse() {
    this.multiContainsResponse = null;
  }

  /** Returns true if field multiContainsResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiContainsResponse() {
    return this.multiContainsResponse != null;
  }

  public void setMultiContainsResponseIsSet(boolean value) {
    if (!value) {
      this.multiContainsResponse = null;
    }
  }

  public ManifestAppendResponse getManifestAppendResponse() {
    return this.manifestAppendResponse;
  }

  public BuckCacheResponse setManifestAppendResponse(ManifestAppendResponse manifestAppendResponse) {
    this.manifestAppendResponse = manifestAppendResponse;
    return this;
  }

  public void unsetManifestAppendResponse() {
    this.manifestAppendResponse = null;
  }

  /** Returns true if field manifestAppendResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetManifestAppendResponse() {
    return this.manifestAppendResponse != null;
  }

  public void setManifestAppendResponseIsSet(boolean value) {
    if (!value) {
      this.manifestAppendResponse = null;
    }
  }

  public ManifestFetchResponse getManifestFetchResponse() {
    return this.manifestFetchResponse;
  }

  public BuckCacheResponse setManifestFetchResponse(ManifestFetchResponse manifestFetchResponse) {
    this.manifestFetchResponse = manifestFetchResponse;
    return this;
  }

  public void unsetManifestFetchResponse() {
    this.manifestFetchResponse = null;
  }

  /** Returns true if field manifestFetchResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetManifestFetchResponse() {
    return this.manifestFetchResponse != null;
  }

  public void setManifestFetchResponseIsSet(boolean value) {
    if (!value) {
      this.manifestFetchResponse = null;
    }
  }

  public ManifestDeleteResponse getManifestDeleteResponse() {
    return this.manifestDeleteResponse;
  }

  public BuckCacheResponse setManifestDeleteResponse(ManifestDeleteResponse manifestDeleteResponse) {
    this.manifestDeleteResponse = manifestDeleteResponse;
    return this;
  }

  public void unsetManifestDeleteResponse() {
    this.manifestDeleteResponse = null;
  }

  /** Returns true if field manifestDeleteResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetManifestDeleteResponse() {
    return this.manifestDeleteResponse != null;
  }

  public void setManifestDeleteResponseIsSet(boolean value) {
    if (!value) {
      this.manifestDeleteResponse = null;
    }
  }

  public ManifestSetResponse getManifestSetResponse() {
    return this.manifestSetResponse;
  }

  public BuckCacheResponse setManifestSetResponse(ManifestSetResponse manifestSetResponse) {
    this.manifestSetResponse = manifestSetResponse;
    return this;
  }

  public void unsetManifestSetResponse() {
    this.manifestSetResponse = null;
  }

  /** Returns true if field manifestSetResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetManifestSetResponse() {
    return this.manifestSetResponse != null;
  }

  public void setManifestSetResponseIsSet(boolean value) {
    if (!value) {
      this.manifestSetResponse = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case WAS_SUCCESSFUL:
      if (value == null) {
        unsetWasSuccessful();
      } else {
        setWasSuccessful((java.lang.Boolean)value);
      }
      break;

    case ERROR_MESSAGE:
      if (value == null) {
        unsetErrorMessage();
      } else {
        setErrorMessage((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((BuckCacheRequestType)value);
      }
      break;

    case DIAGNOSTIC_SERVER_INFO:
      if (value == null) {
        unsetDiagnosticServerInfo();
      } else {
        setDiagnosticServerInfo((java.lang.String)value);
      }
      break;

    case PAYLOADS:
      if (value == null) {
        unsetPayloads();
      } else {
        setPayloads((java.util.List<PayloadInfo>)value);
      }
      break;

    case FETCH_RESPONSE:
      if (value == null) {
        unsetFetchResponse();
      } else {
        setFetchResponse((BuckCacheFetchResponse)value);
      }
      break;

    case STORE_RESPONSE:
      if (value == null) {
        unsetStoreResponse();
      } else {
        setStoreResponse((BuckCacheStoreResponse)value);
      }
      break;

    case MULTI_FETCH_RESPONSE:
      if (value == null) {
        unsetMultiFetchResponse();
      } else {
        setMultiFetchResponse((BuckCacheMultiFetchResponse)value);
      }
      break;

    case DELETE_RESPONSE:
      if (value == null) {
        unsetDeleteResponse();
      } else {
        setDeleteResponse((BuckCacheDeleteResponse)value);
      }
      break;

    case MULTI_CONTAINS_RESPONSE:
      if (value == null) {
        unsetMultiContainsResponse();
      } else {
        setMultiContainsResponse((BuckCacheMultiContainsResponse)value);
      }
      break;

    case MANIFEST_APPEND_RESPONSE:
      if (value == null) {
        unsetManifestAppendResponse();
      } else {
        setManifestAppendResponse((ManifestAppendResponse)value);
      }
      break;

    case MANIFEST_FETCH_RESPONSE:
      if (value == null) {
        unsetManifestFetchResponse();
      } else {
        setManifestFetchResponse((ManifestFetchResponse)value);
      }
      break;

    case MANIFEST_DELETE_RESPONSE:
      if (value == null) {
        unsetManifestDeleteResponse();
      } else {
        setManifestDeleteResponse((ManifestDeleteResponse)value);
      }
      break;

    case MANIFEST_SET_RESPONSE:
      if (value == null) {
        unsetManifestSetResponse();
      } else {
        setManifestSetResponse((ManifestSetResponse)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case WAS_SUCCESSFUL:
      return isWasSuccessful();

    case ERROR_MESSAGE:
      return getErrorMessage();

    case TYPE:
      return getType();

    case DIAGNOSTIC_SERVER_INFO:
      return getDiagnosticServerInfo();

    case PAYLOADS:
      return getPayloads();

    case FETCH_RESPONSE:
      return getFetchResponse();

    case STORE_RESPONSE:
      return getStoreResponse();

    case MULTI_FETCH_RESPONSE:
      return getMultiFetchResponse();

    case DELETE_RESPONSE:
      return getDeleteResponse();

    case MULTI_CONTAINS_RESPONSE:
      return getMultiContainsResponse();

    case MANIFEST_APPEND_RESPONSE:
      return getManifestAppendResponse();

    case MANIFEST_FETCH_RESPONSE:
      return getManifestFetchResponse();

    case MANIFEST_DELETE_RESPONSE:
      return getManifestDeleteResponse();

    case MANIFEST_SET_RESPONSE:
      return getManifestSetResponse();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case WAS_SUCCESSFUL:
      return isSetWasSuccessful();
    case ERROR_MESSAGE:
      return isSetErrorMessage();
    case TYPE:
      return isSetType();
    case DIAGNOSTIC_SERVER_INFO:
      return isSetDiagnosticServerInfo();
    case PAYLOADS:
      return isSetPayloads();
    case FETCH_RESPONSE:
      return isSetFetchResponse();
    case STORE_RESPONSE:
      return isSetStoreResponse();
    case MULTI_FETCH_RESPONSE:
      return isSetMultiFetchResponse();
    case DELETE_RESPONSE:
      return isSetDeleteResponse();
    case MULTI_CONTAINS_RESPONSE:
      return isSetMultiContainsResponse();
    case MANIFEST_APPEND_RESPONSE:
      return isSetManifestAppendResponse();
    case MANIFEST_FETCH_RESPONSE:
      return isSetManifestFetchResponse();
    case MANIFEST_DELETE_RESPONSE:
      return isSetManifestDeleteResponse();
    case MANIFEST_SET_RESPONSE:
      return isSetManifestSetResponse();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BuckCacheResponse)
      return this.equals((BuckCacheResponse)that);
    return false;
  }

  public boolean equals(BuckCacheResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_wasSuccessful = true && this.isSetWasSuccessful();
    boolean that_present_wasSuccessful = true && that.isSetWasSuccessful();
    if (this_present_wasSuccessful || that_present_wasSuccessful) {
      if (!(this_present_wasSuccessful && that_present_wasSuccessful))
        return false;
      if (this.wasSuccessful != that.wasSuccessful)
        return false;
    }

    boolean this_present_errorMessage = true && this.isSetErrorMessage();
    boolean that_present_errorMessage = true && that.isSetErrorMessage();
    if (this_present_errorMessage || that_present_errorMessage) {
      if (!(this_present_errorMessage && that_present_errorMessage))
        return false;
      if (!this.errorMessage.equals(that.errorMessage))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_diagnosticServerInfo = true && this.isSetDiagnosticServerInfo();
    boolean that_present_diagnosticServerInfo = true && that.isSetDiagnosticServerInfo();
    if (this_present_diagnosticServerInfo || that_present_diagnosticServerInfo) {
      if (!(this_present_diagnosticServerInfo && that_present_diagnosticServerInfo))
        return false;
      if (!this.diagnosticServerInfo.equals(that.diagnosticServerInfo))
        return false;
    }

    boolean this_present_payloads = true && this.isSetPayloads();
    boolean that_present_payloads = true && that.isSetPayloads();
    if (this_present_payloads || that_present_payloads) {
      if (!(this_present_payloads && that_present_payloads))
        return false;
      if (!this.payloads.equals(that.payloads))
        return false;
    }

    boolean this_present_fetchResponse = true && this.isSetFetchResponse();
    boolean that_present_fetchResponse = true && that.isSetFetchResponse();
    if (this_present_fetchResponse || that_present_fetchResponse) {
      if (!(this_present_fetchResponse && that_present_fetchResponse))
        return false;
      if (!this.fetchResponse.equals(that.fetchResponse))
        return false;
    }

    boolean this_present_storeResponse = true && this.isSetStoreResponse();
    boolean that_present_storeResponse = true && that.isSetStoreResponse();
    if (this_present_storeResponse || that_present_storeResponse) {
      if (!(this_present_storeResponse && that_present_storeResponse))
        return false;
      if (!this.storeResponse.equals(that.storeResponse))
        return false;
    }

    boolean this_present_multiFetchResponse = true && this.isSetMultiFetchResponse();
    boolean that_present_multiFetchResponse = true && that.isSetMultiFetchResponse();
    if (this_present_multiFetchResponse || that_present_multiFetchResponse) {
      if (!(this_present_multiFetchResponse && that_present_multiFetchResponse))
        return false;
      if (!this.multiFetchResponse.equals(that.multiFetchResponse))
        return false;
    }

    boolean this_present_deleteResponse = true && this.isSetDeleteResponse();
    boolean that_present_deleteResponse = true && that.isSetDeleteResponse();
    if (this_present_deleteResponse || that_present_deleteResponse) {
      if (!(this_present_deleteResponse && that_present_deleteResponse))
        return false;
      if (!this.deleteResponse.equals(that.deleteResponse))
        return false;
    }

    boolean this_present_multiContainsResponse = true && this.isSetMultiContainsResponse();
    boolean that_present_multiContainsResponse = true && that.isSetMultiContainsResponse();
    if (this_present_multiContainsResponse || that_present_multiContainsResponse) {
      if (!(this_present_multiContainsResponse && that_present_multiContainsResponse))
        return false;
      if (!this.multiContainsResponse.equals(that.multiContainsResponse))
        return false;
    }

    boolean this_present_manifestAppendResponse = true && this.isSetManifestAppendResponse();
    boolean that_present_manifestAppendResponse = true && that.isSetManifestAppendResponse();
    if (this_present_manifestAppendResponse || that_present_manifestAppendResponse) {
      if (!(this_present_manifestAppendResponse && that_present_manifestAppendResponse))
        return false;
      if (!this.manifestAppendResponse.equals(that.manifestAppendResponse))
        return false;
    }

    boolean this_present_manifestFetchResponse = true && this.isSetManifestFetchResponse();
    boolean that_present_manifestFetchResponse = true && that.isSetManifestFetchResponse();
    if (this_present_manifestFetchResponse || that_present_manifestFetchResponse) {
      if (!(this_present_manifestFetchResponse && that_present_manifestFetchResponse))
        return false;
      if (!this.manifestFetchResponse.equals(that.manifestFetchResponse))
        return false;
    }

    boolean this_present_manifestDeleteResponse = true && this.isSetManifestDeleteResponse();
    boolean that_present_manifestDeleteResponse = true && that.isSetManifestDeleteResponse();
    if (this_present_manifestDeleteResponse || that_present_manifestDeleteResponse) {
      if (!(this_present_manifestDeleteResponse && that_present_manifestDeleteResponse))
        return false;
      if (!this.manifestDeleteResponse.equals(that.manifestDeleteResponse))
        return false;
    }

    boolean this_present_manifestSetResponse = true && this.isSetManifestSetResponse();
    boolean that_present_manifestSetResponse = true && that.isSetManifestSetResponse();
    if (this_present_manifestSetResponse || that_present_manifestSetResponse) {
      if (!(this_present_manifestSetResponse && that_present_manifestSetResponse))
        return false;
      if (!this.manifestSetResponse.equals(that.manifestSetResponse))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetWasSuccessful()) ? 131071 : 524287);
    if (isSetWasSuccessful())
      hashCode = hashCode * 8191 + ((wasSuccessful) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetErrorMessage()) ? 131071 : 524287);
    if (isSetErrorMessage())
      hashCode = hashCode * 8191 + errorMessage.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetDiagnosticServerInfo()) ? 131071 : 524287);
    if (isSetDiagnosticServerInfo())
      hashCode = hashCode * 8191 + diagnosticServerInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetPayloads()) ? 131071 : 524287);
    if (isSetPayloads())
      hashCode = hashCode * 8191 + payloads.hashCode();

    hashCode = hashCode * 8191 + ((isSetFetchResponse()) ? 131071 : 524287);
    if (isSetFetchResponse())
      hashCode = hashCode * 8191 + fetchResponse.hashCode();

    hashCode = hashCode * 8191 + ((isSetStoreResponse()) ? 131071 : 524287);
    if (isSetStoreResponse())
      hashCode = hashCode * 8191 + storeResponse.hashCode();

    hashCode = hashCode * 8191 + ((isSetMultiFetchResponse()) ? 131071 : 524287);
    if (isSetMultiFetchResponse())
      hashCode = hashCode * 8191 + multiFetchResponse.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeleteResponse()) ? 131071 : 524287);
    if (isSetDeleteResponse())
      hashCode = hashCode * 8191 + deleteResponse.hashCode();

    hashCode = hashCode * 8191 + ((isSetMultiContainsResponse()) ? 131071 : 524287);
    if (isSetMultiContainsResponse())
      hashCode = hashCode * 8191 + multiContainsResponse.hashCode();

    hashCode = hashCode * 8191 + ((isSetManifestAppendResponse()) ? 131071 : 524287);
    if (isSetManifestAppendResponse())
      hashCode = hashCode * 8191 + manifestAppendResponse.hashCode();

    hashCode = hashCode * 8191 + ((isSetManifestFetchResponse()) ? 131071 : 524287);
    if (isSetManifestFetchResponse())
      hashCode = hashCode * 8191 + manifestFetchResponse.hashCode();

    hashCode = hashCode * 8191 + ((isSetManifestDeleteResponse()) ? 131071 : 524287);
    if (isSetManifestDeleteResponse())
      hashCode = hashCode * 8191 + manifestDeleteResponse.hashCode();

    hashCode = hashCode * 8191 + ((isSetManifestSetResponse()) ? 131071 : 524287);
    if (isSetManifestSetResponse())
      hashCode = hashCode * 8191 + manifestSetResponse.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BuckCacheResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetWasSuccessful()).compareTo(other.isSetWasSuccessful());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWasSuccessful()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wasSuccessful, other.wasSuccessful);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorMessage()).compareTo(other.isSetErrorMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMessage, other.errorMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDiagnosticServerInfo()).compareTo(other.isSetDiagnosticServerInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiagnosticServerInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diagnosticServerInfo, other.diagnosticServerInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPayloads()).compareTo(other.isSetPayloads());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayloads()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payloads, other.payloads);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFetchResponse()).compareTo(other.isSetFetchResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchResponse, other.fetchResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStoreResponse()).compareTo(other.isSetStoreResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeResponse, other.storeResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMultiFetchResponse()).compareTo(other.isSetMultiFetchResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiFetchResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiFetchResponse, other.multiFetchResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeleteResponse()).compareTo(other.isSetDeleteResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteResponse, other.deleteResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMultiContainsResponse()).compareTo(other.isSetMultiContainsResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiContainsResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiContainsResponse, other.multiContainsResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManifestAppendResponse()).compareTo(other.isSetManifestAppendResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManifestAppendResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manifestAppendResponse, other.manifestAppendResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManifestFetchResponse()).compareTo(other.isSetManifestFetchResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManifestFetchResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manifestFetchResponse, other.manifestFetchResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManifestDeleteResponse()).compareTo(other.isSetManifestDeleteResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManifestDeleteResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manifestDeleteResponse, other.manifestDeleteResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManifestSetResponse()).compareTo(other.isSetManifestSetResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManifestSetResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manifestSetResponse, other.manifestSetResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BuckCacheResponse(");
    boolean first = true;

    if (isSetWasSuccessful()) {
      sb.append("wasSuccessful:");
      sb.append(this.wasSuccessful);
      first = false;
    }
    if (isSetErrorMessage()) {
      if (!first) sb.append(", ");
      sb.append("errorMessage:");
      if (this.errorMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.errorMessage);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetDiagnosticServerInfo()) {
      if (!first) sb.append(", ");
      sb.append("diagnosticServerInfo:");
      if (this.diagnosticServerInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.diagnosticServerInfo);
      }
      first = false;
    }
    if (isSetPayloads()) {
      if (!first) sb.append(", ");
      sb.append("payloads:");
      if (this.payloads == null) {
        sb.append("null");
      } else {
        sb.append(this.payloads);
      }
      first = false;
    }
    if (isSetFetchResponse()) {
      if (!first) sb.append(", ");
      sb.append("fetchResponse:");
      if (this.fetchResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.fetchResponse);
      }
      first = false;
    }
    if (isSetStoreResponse()) {
      if (!first) sb.append(", ");
      sb.append("storeResponse:");
      if (this.storeResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.storeResponse);
      }
      first = false;
    }
    if (isSetMultiFetchResponse()) {
      if (!first) sb.append(", ");
      sb.append("multiFetchResponse:");
      if (this.multiFetchResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.multiFetchResponse);
      }
      first = false;
    }
    if (isSetDeleteResponse()) {
      if (!first) sb.append(", ");
      sb.append("deleteResponse:");
      if (this.deleteResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.deleteResponse);
      }
      first = false;
    }
    if (isSetMultiContainsResponse()) {
      if (!first) sb.append(", ");
      sb.append("multiContainsResponse:");
      if (this.multiContainsResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.multiContainsResponse);
      }
      first = false;
    }
    if (isSetManifestAppendResponse()) {
      if (!first) sb.append(", ");
      sb.append("manifestAppendResponse:");
      if (this.manifestAppendResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.manifestAppendResponse);
      }
      first = false;
    }
    if (isSetManifestFetchResponse()) {
      if (!first) sb.append(", ");
      sb.append("manifestFetchResponse:");
      if (this.manifestFetchResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.manifestFetchResponse);
      }
      first = false;
    }
    if (isSetManifestDeleteResponse()) {
      if (!first) sb.append(", ");
      sb.append("manifestDeleteResponse:");
      if (this.manifestDeleteResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.manifestDeleteResponse);
      }
      first = false;
    }
    if (isSetManifestSetResponse()) {
      if (!first) sb.append(", ");
      sb.append("manifestSetResponse:");
      if (this.manifestSetResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.manifestSetResponse);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (fetchResponse != null) {
      fetchResponse.validate();
    }
    if (storeResponse != null) {
      storeResponse.validate();
    }
    if (multiFetchResponse != null) {
      multiFetchResponse.validate();
    }
    if (deleteResponse != null) {
      deleteResponse.validate();
    }
    if (multiContainsResponse != null) {
      multiContainsResponse.validate();
    }
    if (manifestAppendResponse != null) {
      manifestAppendResponse.validate();
    }
    if (manifestFetchResponse != null) {
      manifestFetchResponse.validate();
    }
    if (manifestDeleteResponse != null) {
      manifestDeleteResponse.validate();
    }
    if (manifestSetResponse != null) {
      manifestSetResponse.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BuckCacheResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuckCacheResponseStandardScheme getScheme() {
      return new BuckCacheResponseStandardScheme();
    }
  }

  private static class BuckCacheResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<BuckCacheResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BuckCacheResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WAS_SUCCESSFUL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.wasSuccessful = iprot.readBool();
              struct.setWasSuccessfulIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMessage = iprot.readString();
              struct.setErrorMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.facebook.buck.artifact_cache.thrift.BuckCacheRequestType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // DIAGNOSTIC_SERVER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.diagnosticServerInfo = iprot.readString();
              struct.setDiagnosticServerInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // PAYLOADS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                struct.payloads = new java.util.ArrayList<PayloadInfo>(_list114.size);
                PayloadInfo _elem115;
                for (int _i116 = 0; _i116 < _list114.size; ++_i116)
                {
                  _elem115 = new PayloadInfo();
                  _elem115.read(iprot);
                  struct.payloads.add(_elem115);
                }
                iprot.readListEnd();
              }
              struct.setPayloadsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // FETCH_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fetchResponse = new BuckCacheFetchResponse();
              struct.fetchResponse.read(iprot);
              struct.setFetchResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // STORE_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.storeResponse = new BuckCacheStoreResponse();
              struct.storeResponse.read(iprot);
              struct.setStoreResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // MULTI_FETCH_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.multiFetchResponse = new BuckCacheMultiFetchResponse();
              struct.multiFetchResponse.read(iprot);
              struct.setMultiFetchResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // DELETE_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deleteResponse = new BuckCacheDeleteResponse();
              struct.deleteResponse.read(iprot);
              struct.setDeleteResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // MULTI_CONTAINS_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.multiContainsResponse = new BuckCacheMultiContainsResponse();
              struct.multiContainsResponse.read(iprot);
              struct.setMultiContainsResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // MANIFEST_APPEND_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.manifestAppendResponse = new ManifestAppendResponse();
              struct.manifestAppendResponse.read(iprot);
              struct.setManifestAppendResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 109: // MANIFEST_FETCH_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.manifestFetchResponse = new ManifestFetchResponse();
              struct.manifestFetchResponse.read(iprot);
              struct.setManifestFetchResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // MANIFEST_DELETE_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.manifestDeleteResponse = new ManifestDeleteResponse();
              struct.manifestDeleteResponse.read(iprot);
              struct.setManifestDeleteResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 111: // MANIFEST_SET_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.manifestSetResponse = new ManifestSetResponse();
              struct.manifestSetResponse.read(iprot);
              struct.setManifestSetResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BuckCacheResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetWasSuccessful()) {
        oprot.writeFieldBegin(WAS_SUCCESSFUL_FIELD_DESC);
        oprot.writeBool(struct.wasSuccessful);
        oprot.writeFieldEnd();
      }
      if (struct.errorMessage != null) {
        if (struct.isSetErrorMessage()) {
          oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.errorMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.diagnosticServerInfo != null) {
        if (struct.isSetDiagnosticServerInfo()) {
          oprot.writeFieldBegin(DIAGNOSTIC_SERVER_INFO_FIELD_DESC);
          oprot.writeString(struct.diagnosticServerInfo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.payloads != null) {
        if (struct.isSetPayloads()) {
          oprot.writeFieldBegin(PAYLOADS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.payloads.size()));
            for (PayloadInfo _iter117 : struct.payloads)
            {
              _iter117.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.fetchResponse != null) {
        if (struct.isSetFetchResponse()) {
          oprot.writeFieldBegin(FETCH_RESPONSE_FIELD_DESC);
          struct.fetchResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.storeResponse != null) {
        if (struct.isSetStoreResponse()) {
          oprot.writeFieldBegin(STORE_RESPONSE_FIELD_DESC);
          struct.storeResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiFetchResponse != null) {
        if (struct.isSetMultiFetchResponse()) {
          oprot.writeFieldBegin(MULTI_FETCH_RESPONSE_FIELD_DESC);
          struct.multiFetchResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deleteResponse != null) {
        if (struct.isSetDeleteResponse()) {
          oprot.writeFieldBegin(DELETE_RESPONSE_FIELD_DESC);
          struct.deleteResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiContainsResponse != null) {
        if (struct.isSetMultiContainsResponse()) {
          oprot.writeFieldBegin(MULTI_CONTAINS_RESPONSE_FIELD_DESC);
          struct.multiContainsResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.manifestAppendResponse != null) {
        if (struct.isSetManifestAppendResponse()) {
          oprot.writeFieldBegin(MANIFEST_APPEND_RESPONSE_FIELD_DESC);
          struct.manifestAppendResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.manifestFetchResponse != null) {
        if (struct.isSetManifestFetchResponse()) {
          oprot.writeFieldBegin(MANIFEST_FETCH_RESPONSE_FIELD_DESC);
          struct.manifestFetchResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.manifestDeleteResponse != null) {
        if (struct.isSetManifestDeleteResponse()) {
          oprot.writeFieldBegin(MANIFEST_DELETE_RESPONSE_FIELD_DESC);
          struct.manifestDeleteResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.manifestSetResponse != null) {
        if (struct.isSetManifestSetResponse()) {
          oprot.writeFieldBegin(MANIFEST_SET_RESPONSE_FIELD_DESC);
          struct.manifestSetResponse.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BuckCacheResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuckCacheResponseTupleScheme getScheme() {
      return new BuckCacheResponseTupleScheme();
    }
  }

  private static class BuckCacheResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<BuckCacheResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BuckCacheResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWasSuccessful()) {
        optionals.set(0);
      }
      if (struct.isSetErrorMessage()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetDiagnosticServerInfo()) {
        optionals.set(3);
      }
      if (struct.isSetPayloads()) {
        optionals.set(4);
      }
      if (struct.isSetFetchResponse()) {
        optionals.set(5);
      }
      if (struct.isSetStoreResponse()) {
        optionals.set(6);
      }
      if (struct.isSetMultiFetchResponse()) {
        optionals.set(7);
      }
      if (struct.isSetDeleteResponse()) {
        optionals.set(8);
      }
      if (struct.isSetMultiContainsResponse()) {
        optionals.set(9);
      }
      if (struct.isSetManifestAppendResponse()) {
        optionals.set(10);
      }
      if (struct.isSetManifestFetchResponse()) {
        optionals.set(11);
      }
      if (struct.isSetManifestDeleteResponse()) {
        optionals.set(12);
      }
      if (struct.isSetManifestSetResponse()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetWasSuccessful()) {
        oprot.writeBool(struct.wasSuccessful);
      }
      if (struct.isSetErrorMessage()) {
        oprot.writeString(struct.errorMessage);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetDiagnosticServerInfo()) {
        oprot.writeString(struct.diagnosticServerInfo);
      }
      if (struct.isSetPayloads()) {
        {
          oprot.writeI32(struct.payloads.size());
          for (PayloadInfo _iter118 : struct.payloads)
          {
            _iter118.write(oprot);
          }
        }
      }
      if (struct.isSetFetchResponse()) {
        struct.fetchResponse.write(oprot);
      }
      if (struct.isSetStoreResponse()) {
        struct.storeResponse.write(oprot);
      }
      if (struct.isSetMultiFetchResponse()) {
        struct.multiFetchResponse.write(oprot);
      }
      if (struct.isSetDeleteResponse()) {
        struct.deleteResponse.write(oprot);
      }
      if (struct.isSetMultiContainsResponse()) {
        struct.multiContainsResponse.write(oprot);
      }
      if (struct.isSetManifestAppendResponse()) {
        struct.manifestAppendResponse.write(oprot);
      }
      if (struct.isSetManifestFetchResponse()) {
        struct.manifestFetchResponse.write(oprot);
      }
      if (struct.isSetManifestDeleteResponse()) {
        struct.manifestDeleteResponse.write(oprot);
      }
      if (struct.isSetManifestSetResponse()) {
        struct.manifestSetResponse.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BuckCacheResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.wasSuccessful = iprot.readBool();
        struct.setWasSuccessfulIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errorMessage = iprot.readString();
        struct.setErrorMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = com.facebook.buck.artifact_cache.thrift.BuckCacheRequestType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.diagnosticServerInfo = iprot.readString();
        struct.setDiagnosticServerInfoIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.payloads = new java.util.ArrayList<PayloadInfo>(_list119.size);
          PayloadInfo _elem120;
          for (int _i121 = 0; _i121 < _list119.size; ++_i121)
          {
            _elem120 = new PayloadInfo();
            _elem120.read(iprot);
            struct.payloads.add(_elem120);
          }
        }
        struct.setPayloadsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fetchResponse = new BuckCacheFetchResponse();
        struct.fetchResponse.read(iprot);
        struct.setFetchResponseIsSet(true);
      }
      if (incoming.get(6)) {
        struct.storeResponse = new BuckCacheStoreResponse();
        struct.storeResponse.read(iprot);
        struct.setStoreResponseIsSet(true);
      }
      if (incoming.get(7)) {
        struct.multiFetchResponse = new BuckCacheMultiFetchResponse();
        struct.multiFetchResponse.read(iprot);
        struct.setMultiFetchResponseIsSet(true);
      }
      if (incoming.get(8)) {
        struct.deleteResponse = new BuckCacheDeleteResponse();
        struct.deleteResponse.read(iprot);
        struct.setDeleteResponseIsSet(true);
      }
      if (incoming.get(9)) {
        struct.multiContainsResponse = new BuckCacheMultiContainsResponse();
        struct.multiContainsResponse.read(iprot);
        struct.setMultiContainsResponseIsSet(true);
      }
      if (incoming.get(10)) {
        struct.manifestAppendResponse = new ManifestAppendResponse();
        struct.manifestAppendResponse.read(iprot);
        struct.setManifestAppendResponseIsSet(true);
      }
      if (incoming.get(11)) {
        struct.manifestFetchResponse = new ManifestFetchResponse();
        struct.manifestFetchResponse.read(iprot);
        struct.setManifestFetchResponseIsSet(true);
      }
      if (incoming.get(12)) {
        struct.manifestDeleteResponse = new ManifestDeleteResponse();
        struct.manifestDeleteResponse.read(iprot);
        struct.setManifestDeleteResponseIsSet(true);
      }
      if (incoming.get(13)) {
        struct.manifestSetResponse = new ManifestSetResponse();
        struct.manifestSetResponse.read(iprot);
        struct.setManifestSetResponseIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

