/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.artifact_cache.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class BuckCacheRequest implements org.apache.thrift.TBase<BuckCacheRequest, BuckCacheRequest._Fields>, java.io.Serializable, Cloneable, Comparable<BuckCacheRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BuckCacheRequest");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BUCK_BUILD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("buckBuildId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAYLOADS_FIELD_DESC = new org.apache.thrift.protocol.TField("payloads", org.apache.thrift.protocol.TType.LIST, (short)100);
  private static final org.apache.thrift.protocol.TField FETCH_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchRequest", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField STORE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("storeRequest", org.apache.thrift.protocol.TType.STRUCT, (short)102);
  private static final org.apache.thrift.protocol.TField MULTI_FETCH_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("multiFetchRequest", org.apache.thrift.protocol.TType.STRUCT, (short)103);
  private static final org.apache.thrift.protocol.TField DELETE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("deleteRequest", org.apache.thrift.protocol.TType.STRUCT, (short)105);
  private static final org.apache.thrift.protocol.TField MULTI_CONTAINS_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("multiContainsRequest", org.apache.thrift.protocol.TType.STRUCT, (short)107);
  private static final org.apache.thrift.protocol.TField MANIFEST_APPEND_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("manifestAppendRequest", org.apache.thrift.protocol.TType.STRUCT, (short)108);
  private static final org.apache.thrift.protocol.TField MANIFEST_FETCH_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("manifestFetchRequest", org.apache.thrift.protocol.TType.STRUCT, (short)109);
  private static final org.apache.thrift.protocol.TField MANIFEST_DELETE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("manifestDeleteRequest", org.apache.thrift.protocol.TType.STRUCT, (short)110);
  private static final org.apache.thrift.protocol.TField MANIFEST_SET_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("manifestSetRequest", org.apache.thrift.protocol.TType.STRUCT, (short)111);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BuckCacheRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BuckCacheRequestTupleSchemeFactory();

  /**
   * 
   * @see BuckCacheRequestType
   */
  public BuckCacheRequestType type; // optional
  public java.lang.String buckBuildId; // optional
  public java.util.List<PayloadInfo> payloads; // optional
  public BuckCacheFetchRequest fetchRequest; // optional
  public BuckCacheStoreRequest storeRequest; // optional
  public BuckCacheMultiFetchRequest multiFetchRequest; // optional
  public BuckCacheDeleteRequest deleteRequest; // optional
  public BuckCacheMultiContainsRequest multiContainsRequest; // optional
  public ManifestAppendRequest manifestAppendRequest; // optional
  public ManifestFetchRequest manifestFetchRequest; // optional
  public ManifestDeleteRequest manifestDeleteRequest; // optional
  public ManifestSetRequest manifestSetRequest; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see BuckCacheRequestType
     */
    TYPE((short)1, "type"),
    BUCK_BUILD_ID((short)2, "buckBuildId"),
    PAYLOADS((short)100, "payloads"),
    FETCH_REQUEST((short)101, "fetchRequest"),
    STORE_REQUEST((short)102, "storeRequest"),
    MULTI_FETCH_REQUEST((short)103, "multiFetchRequest"),
    DELETE_REQUEST((short)105, "deleteRequest"),
    MULTI_CONTAINS_REQUEST((short)107, "multiContainsRequest"),
    MANIFEST_APPEND_REQUEST((short)108, "manifestAppendRequest"),
    MANIFEST_FETCH_REQUEST((short)109, "manifestFetchRequest"),
    MANIFEST_DELETE_REQUEST((short)110, "manifestDeleteRequest"),
    MANIFEST_SET_REQUEST((short)111, "manifestSetRequest");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // BUCK_BUILD_ID
          return BUCK_BUILD_ID;
        case 100: // PAYLOADS
          return PAYLOADS;
        case 101: // FETCH_REQUEST
          return FETCH_REQUEST;
        case 102: // STORE_REQUEST
          return STORE_REQUEST;
        case 103: // MULTI_FETCH_REQUEST
          return MULTI_FETCH_REQUEST;
        case 105: // DELETE_REQUEST
          return DELETE_REQUEST;
        case 107: // MULTI_CONTAINS_REQUEST
          return MULTI_CONTAINS_REQUEST;
        case 108: // MANIFEST_APPEND_REQUEST
          return MANIFEST_APPEND_REQUEST;
        case 109: // MANIFEST_FETCH_REQUEST
          return MANIFEST_FETCH_REQUEST;
        case 110: // MANIFEST_DELETE_REQUEST
          return MANIFEST_DELETE_REQUEST;
        case 111: // MANIFEST_SET_REQUEST
          return MANIFEST_SET_REQUEST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TYPE,_Fields.BUCK_BUILD_ID,_Fields.PAYLOADS,_Fields.FETCH_REQUEST,_Fields.STORE_REQUEST,_Fields.MULTI_FETCH_REQUEST,_Fields.DELETE_REQUEST,_Fields.MULTI_CONTAINS_REQUEST,_Fields.MANIFEST_APPEND_REQUEST,_Fields.MANIFEST_FETCH_REQUEST,_Fields.MANIFEST_DELETE_REQUEST,_Fields.MANIFEST_SET_REQUEST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, BuckCacheRequestType.class)));
    tmpMap.put(_Fields.BUCK_BUILD_ID, new org.apache.thrift.meta_data.FieldMetaData("buckBuildId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYLOADS, new org.apache.thrift.meta_data.FieldMetaData("payloads", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PayloadInfo.class))));
    tmpMap.put(_Fields.FETCH_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("fetchRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuckCacheFetchRequest.class)));
    tmpMap.put(_Fields.STORE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("storeRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuckCacheStoreRequest.class)));
    tmpMap.put(_Fields.MULTI_FETCH_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("multiFetchRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuckCacheMultiFetchRequest.class)));
    tmpMap.put(_Fields.DELETE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("deleteRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuckCacheDeleteRequest.class)));
    tmpMap.put(_Fields.MULTI_CONTAINS_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("multiContainsRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuckCacheMultiContainsRequest.class)));
    tmpMap.put(_Fields.MANIFEST_APPEND_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("manifestAppendRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ManifestAppendRequest.class)));
    tmpMap.put(_Fields.MANIFEST_FETCH_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("manifestFetchRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ManifestFetchRequest.class)));
    tmpMap.put(_Fields.MANIFEST_DELETE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("manifestDeleteRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ManifestDeleteRequest.class)));
    tmpMap.put(_Fields.MANIFEST_SET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("manifestSetRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ManifestSetRequest.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BuckCacheRequest.class, metaDataMap);
  }

  public BuckCacheRequest() {
    this.type = com.facebook.buck.artifact_cache.thrift.BuckCacheRequestType.UNKNOWN;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BuckCacheRequest(BuckCacheRequest other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetBuckBuildId()) {
      this.buckBuildId = other.buckBuildId;
    }
    if (other.isSetPayloads()) {
      java.util.List<PayloadInfo> __this__payloads = new java.util.ArrayList<PayloadInfo>(other.payloads.size());
      for (PayloadInfo other_element : other.payloads) {
        __this__payloads.add(new PayloadInfo(other_element));
      }
      this.payloads = __this__payloads;
    }
    if (other.isSetFetchRequest()) {
      this.fetchRequest = new BuckCacheFetchRequest(other.fetchRequest);
    }
    if (other.isSetStoreRequest()) {
      this.storeRequest = new BuckCacheStoreRequest(other.storeRequest);
    }
    if (other.isSetMultiFetchRequest()) {
      this.multiFetchRequest = new BuckCacheMultiFetchRequest(other.multiFetchRequest);
    }
    if (other.isSetDeleteRequest()) {
      this.deleteRequest = new BuckCacheDeleteRequest(other.deleteRequest);
    }
    if (other.isSetMultiContainsRequest()) {
      this.multiContainsRequest = new BuckCacheMultiContainsRequest(other.multiContainsRequest);
    }
    if (other.isSetManifestAppendRequest()) {
      this.manifestAppendRequest = new ManifestAppendRequest(other.manifestAppendRequest);
    }
    if (other.isSetManifestFetchRequest()) {
      this.manifestFetchRequest = new ManifestFetchRequest(other.manifestFetchRequest);
    }
    if (other.isSetManifestDeleteRequest()) {
      this.manifestDeleteRequest = new ManifestDeleteRequest(other.manifestDeleteRequest);
    }
    if (other.isSetManifestSetRequest()) {
      this.manifestSetRequest = new ManifestSetRequest(other.manifestSetRequest);
    }
  }

  public BuckCacheRequest deepCopy() {
    return new BuckCacheRequest(this);
  }

  @Override
  public void clear() {
    this.type = com.facebook.buck.artifact_cache.thrift.BuckCacheRequestType.UNKNOWN;

    this.buckBuildId = null;
    this.payloads = null;
    this.fetchRequest = null;
    this.storeRequest = null;
    this.multiFetchRequest = null;
    this.deleteRequest = null;
    this.multiContainsRequest = null;
    this.manifestAppendRequest = null;
    this.manifestFetchRequest = null;
    this.manifestDeleteRequest = null;
    this.manifestSetRequest = null;
  }

  /**
   * 
   * @see BuckCacheRequestType
   */
  public BuckCacheRequestType getType() {
    return this.type;
  }

  /**
   * 
   * @see BuckCacheRequestType
   */
  public BuckCacheRequest setType(BuckCacheRequestType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getBuckBuildId() {
    return this.buckBuildId;
  }

  public BuckCacheRequest setBuckBuildId(java.lang.String buckBuildId) {
    this.buckBuildId = buckBuildId;
    return this;
  }

  public void unsetBuckBuildId() {
    this.buckBuildId = null;
  }

  /** Returns true if field buckBuildId is set (has been assigned a value) and false otherwise */
  public boolean isSetBuckBuildId() {
    return this.buckBuildId != null;
  }

  public void setBuckBuildIdIsSet(boolean value) {
    if (!value) {
      this.buckBuildId = null;
    }
  }

  public int getPayloadsSize() {
    return (this.payloads == null) ? 0 : this.payloads.size();
  }

  public java.util.Iterator<PayloadInfo> getPayloadsIterator() {
    return (this.payloads == null) ? null : this.payloads.iterator();
  }

  public void addToPayloads(PayloadInfo elem) {
    if (this.payloads == null) {
      this.payloads = new java.util.ArrayList<PayloadInfo>();
    }
    this.payloads.add(elem);
  }

  public java.util.List<PayloadInfo> getPayloads() {
    return this.payloads;
  }

  public BuckCacheRequest setPayloads(java.util.List<PayloadInfo> payloads) {
    this.payloads = payloads;
    return this;
  }

  public void unsetPayloads() {
    this.payloads = null;
  }

  /** Returns true if field payloads is set (has been assigned a value) and false otherwise */
  public boolean isSetPayloads() {
    return this.payloads != null;
  }

  public void setPayloadsIsSet(boolean value) {
    if (!value) {
      this.payloads = null;
    }
  }

  public BuckCacheFetchRequest getFetchRequest() {
    return this.fetchRequest;
  }

  public BuckCacheRequest setFetchRequest(BuckCacheFetchRequest fetchRequest) {
    this.fetchRequest = fetchRequest;
    return this;
  }

  public void unsetFetchRequest() {
    this.fetchRequest = null;
  }

  /** Returns true if field fetchRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchRequest() {
    return this.fetchRequest != null;
  }

  public void setFetchRequestIsSet(boolean value) {
    if (!value) {
      this.fetchRequest = null;
    }
  }

  public BuckCacheStoreRequest getStoreRequest() {
    return this.storeRequest;
  }

  public BuckCacheRequest setStoreRequest(BuckCacheStoreRequest storeRequest) {
    this.storeRequest = storeRequest;
    return this;
  }

  public void unsetStoreRequest() {
    this.storeRequest = null;
  }

  /** Returns true if field storeRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreRequest() {
    return this.storeRequest != null;
  }

  public void setStoreRequestIsSet(boolean value) {
    if (!value) {
      this.storeRequest = null;
    }
  }

  public BuckCacheMultiFetchRequest getMultiFetchRequest() {
    return this.multiFetchRequest;
  }

  public BuckCacheRequest setMultiFetchRequest(BuckCacheMultiFetchRequest multiFetchRequest) {
    this.multiFetchRequest = multiFetchRequest;
    return this;
  }

  public void unsetMultiFetchRequest() {
    this.multiFetchRequest = null;
  }

  /** Returns true if field multiFetchRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiFetchRequest() {
    return this.multiFetchRequest != null;
  }

  public void setMultiFetchRequestIsSet(boolean value) {
    if (!value) {
      this.multiFetchRequest = null;
    }
  }

  public BuckCacheDeleteRequest getDeleteRequest() {
    return this.deleteRequest;
  }

  public BuckCacheRequest setDeleteRequest(BuckCacheDeleteRequest deleteRequest) {
    this.deleteRequest = deleteRequest;
    return this;
  }

  public void unsetDeleteRequest() {
    this.deleteRequest = null;
  }

  /** Returns true if field deleteRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteRequest() {
    return this.deleteRequest != null;
  }

  public void setDeleteRequestIsSet(boolean value) {
    if (!value) {
      this.deleteRequest = null;
    }
  }

  public BuckCacheMultiContainsRequest getMultiContainsRequest() {
    return this.multiContainsRequest;
  }

  public BuckCacheRequest setMultiContainsRequest(BuckCacheMultiContainsRequest multiContainsRequest) {
    this.multiContainsRequest = multiContainsRequest;
    return this;
  }

  public void unsetMultiContainsRequest() {
    this.multiContainsRequest = null;
  }

  /** Returns true if field multiContainsRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiContainsRequest() {
    return this.multiContainsRequest != null;
  }

  public void setMultiContainsRequestIsSet(boolean value) {
    if (!value) {
      this.multiContainsRequest = null;
    }
  }

  public ManifestAppendRequest getManifestAppendRequest() {
    return this.manifestAppendRequest;
  }

  public BuckCacheRequest setManifestAppendRequest(ManifestAppendRequest manifestAppendRequest) {
    this.manifestAppendRequest = manifestAppendRequest;
    return this;
  }

  public void unsetManifestAppendRequest() {
    this.manifestAppendRequest = null;
  }

  /** Returns true if field manifestAppendRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetManifestAppendRequest() {
    return this.manifestAppendRequest != null;
  }

  public void setManifestAppendRequestIsSet(boolean value) {
    if (!value) {
      this.manifestAppendRequest = null;
    }
  }

  public ManifestFetchRequest getManifestFetchRequest() {
    return this.manifestFetchRequest;
  }

  public BuckCacheRequest setManifestFetchRequest(ManifestFetchRequest manifestFetchRequest) {
    this.manifestFetchRequest = manifestFetchRequest;
    return this;
  }

  public void unsetManifestFetchRequest() {
    this.manifestFetchRequest = null;
  }

  /** Returns true if field manifestFetchRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetManifestFetchRequest() {
    return this.manifestFetchRequest != null;
  }

  public void setManifestFetchRequestIsSet(boolean value) {
    if (!value) {
      this.manifestFetchRequest = null;
    }
  }

  public ManifestDeleteRequest getManifestDeleteRequest() {
    return this.manifestDeleteRequest;
  }

  public BuckCacheRequest setManifestDeleteRequest(ManifestDeleteRequest manifestDeleteRequest) {
    this.manifestDeleteRequest = manifestDeleteRequest;
    return this;
  }

  public void unsetManifestDeleteRequest() {
    this.manifestDeleteRequest = null;
  }

  /** Returns true if field manifestDeleteRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetManifestDeleteRequest() {
    return this.manifestDeleteRequest != null;
  }

  public void setManifestDeleteRequestIsSet(boolean value) {
    if (!value) {
      this.manifestDeleteRequest = null;
    }
  }

  public ManifestSetRequest getManifestSetRequest() {
    return this.manifestSetRequest;
  }

  public BuckCacheRequest setManifestSetRequest(ManifestSetRequest manifestSetRequest) {
    this.manifestSetRequest = manifestSetRequest;
    return this;
  }

  public void unsetManifestSetRequest() {
    this.manifestSetRequest = null;
  }

  /** Returns true if field manifestSetRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetManifestSetRequest() {
    return this.manifestSetRequest != null;
  }

  public void setManifestSetRequestIsSet(boolean value) {
    if (!value) {
      this.manifestSetRequest = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((BuckCacheRequestType)value);
      }
      break;

    case BUCK_BUILD_ID:
      if (value == null) {
        unsetBuckBuildId();
      } else {
        setBuckBuildId((java.lang.String)value);
      }
      break;

    case PAYLOADS:
      if (value == null) {
        unsetPayloads();
      } else {
        setPayloads((java.util.List<PayloadInfo>)value);
      }
      break;

    case FETCH_REQUEST:
      if (value == null) {
        unsetFetchRequest();
      } else {
        setFetchRequest((BuckCacheFetchRequest)value);
      }
      break;

    case STORE_REQUEST:
      if (value == null) {
        unsetStoreRequest();
      } else {
        setStoreRequest((BuckCacheStoreRequest)value);
      }
      break;

    case MULTI_FETCH_REQUEST:
      if (value == null) {
        unsetMultiFetchRequest();
      } else {
        setMultiFetchRequest((BuckCacheMultiFetchRequest)value);
      }
      break;

    case DELETE_REQUEST:
      if (value == null) {
        unsetDeleteRequest();
      } else {
        setDeleteRequest((BuckCacheDeleteRequest)value);
      }
      break;

    case MULTI_CONTAINS_REQUEST:
      if (value == null) {
        unsetMultiContainsRequest();
      } else {
        setMultiContainsRequest((BuckCacheMultiContainsRequest)value);
      }
      break;

    case MANIFEST_APPEND_REQUEST:
      if (value == null) {
        unsetManifestAppendRequest();
      } else {
        setManifestAppendRequest((ManifestAppendRequest)value);
      }
      break;

    case MANIFEST_FETCH_REQUEST:
      if (value == null) {
        unsetManifestFetchRequest();
      } else {
        setManifestFetchRequest((ManifestFetchRequest)value);
      }
      break;

    case MANIFEST_DELETE_REQUEST:
      if (value == null) {
        unsetManifestDeleteRequest();
      } else {
        setManifestDeleteRequest((ManifestDeleteRequest)value);
      }
      break;

    case MANIFEST_SET_REQUEST:
      if (value == null) {
        unsetManifestSetRequest();
      } else {
        setManifestSetRequest((ManifestSetRequest)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case BUCK_BUILD_ID:
      return getBuckBuildId();

    case PAYLOADS:
      return getPayloads();

    case FETCH_REQUEST:
      return getFetchRequest();

    case STORE_REQUEST:
      return getStoreRequest();

    case MULTI_FETCH_REQUEST:
      return getMultiFetchRequest();

    case DELETE_REQUEST:
      return getDeleteRequest();

    case MULTI_CONTAINS_REQUEST:
      return getMultiContainsRequest();

    case MANIFEST_APPEND_REQUEST:
      return getManifestAppendRequest();

    case MANIFEST_FETCH_REQUEST:
      return getManifestFetchRequest();

    case MANIFEST_DELETE_REQUEST:
      return getManifestDeleteRequest();

    case MANIFEST_SET_REQUEST:
      return getManifestSetRequest();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case BUCK_BUILD_ID:
      return isSetBuckBuildId();
    case PAYLOADS:
      return isSetPayloads();
    case FETCH_REQUEST:
      return isSetFetchRequest();
    case STORE_REQUEST:
      return isSetStoreRequest();
    case MULTI_FETCH_REQUEST:
      return isSetMultiFetchRequest();
    case DELETE_REQUEST:
      return isSetDeleteRequest();
    case MULTI_CONTAINS_REQUEST:
      return isSetMultiContainsRequest();
    case MANIFEST_APPEND_REQUEST:
      return isSetManifestAppendRequest();
    case MANIFEST_FETCH_REQUEST:
      return isSetManifestFetchRequest();
    case MANIFEST_DELETE_REQUEST:
      return isSetManifestDeleteRequest();
    case MANIFEST_SET_REQUEST:
      return isSetManifestSetRequest();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BuckCacheRequest)
      return this.equals((BuckCacheRequest)that);
    return false;
  }

  public boolean equals(BuckCacheRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_buckBuildId = true && this.isSetBuckBuildId();
    boolean that_present_buckBuildId = true && that.isSetBuckBuildId();
    if (this_present_buckBuildId || that_present_buckBuildId) {
      if (!(this_present_buckBuildId && that_present_buckBuildId))
        return false;
      if (!this.buckBuildId.equals(that.buckBuildId))
        return false;
    }

    boolean this_present_payloads = true && this.isSetPayloads();
    boolean that_present_payloads = true && that.isSetPayloads();
    if (this_present_payloads || that_present_payloads) {
      if (!(this_present_payloads && that_present_payloads))
        return false;
      if (!this.payloads.equals(that.payloads))
        return false;
    }

    boolean this_present_fetchRequest = true && this.isSetFetchRequest();
    boolean that_present_fetchRequest = true && that.isSetFetchRequest();
    if (this_present_fetchRequest || that_present_fetchRequest) {
      if (!(this_present_fetchRequest && that_present_fetchRequest))
        return false;
      if (!this.fetchRequest.equals(that.fetchRequest))
        return false;
    }

    boolean this_present_storeRequest = true && this.isSetStoreRequest();
    boolean that_present_storeRequest = true && that.isSetStoreRequest();
    if (this_present_storeRequest || that_present_storeRequest) {
      if (!(this_present_storeRequest && that_present_storeRequest))
        return false;
      if (!this.storeRequest.equals(that.storeRequest))
        return false;
    }

    boolean this_present_multiFetchRequest = true && this.isSetMultiFetchRequest();
    boolean that_present_multiFetchRequest = true && that.isSetMultiFetchRequest();
    if (this_present_multiFetchRequest || that_present_multiFetchRequest) {
      if (!(this_present_multiFetchRequest && that_present_multiFetchRequest))
        return false;
      if (!this.multiFetchRequest.equals(that.multiFetchRequest))
        return false;
    }

    boolean this_present_deleteRequest = true && this.isSetDeleteRequest();
    boolean that_present_deleteRequest = true && that.isSetDeleteRequest();
    if (this_present_deleteRequest || that_present_deleteRequest) {
      if (!(this_present_deleteRequest && that_present_deleteRequest))
        return false;
      if (!this.deleteRequest.equals(that.deleteRequest))
        return false;
    }

    boolean this_present_multiContainsRequest = true && this.isSetMultiContainsRequest();
    boolean that_present_multiContainsRequest = true && that.isSetMultiContainsRequest();
    if (this_present_multiContainsRequest || that_present_multiContainsRequest) {
      if (!(this_present_multiContainsRequest && that_present_multiContainsRequest))
        return false;
      if (!this.multiContainsRequest.equals(that.multiContainsRequest))
        return false;
    }

    boolean this_present_manifestAppendRequest = true && this.isSetManifestAppendRequest();
    boolean that_present_manifestAppendRequest = true && that.isSetManifestAppendRequest();
    if (this_present_manifestAppendRequest || that_present_manifestAppendRequest) {
      if (!(this_present_manifestAppendRequest && that_present_manifestAppendRequest))
        return false;
      if (!this.manifestAppendRequest.equals(that.manifestAppendRequest))
        return false;
    }

    boolean this_present_manifestFetchRequest = true && this.isSetManifestFetchRequest();
    boolean that_present_manifestFetchRequest = true && that.isSetManifestFetchRequest();
    if (this_present_manifestFetchRequest || that_present_manifestFetchRequest) {
      if (!(this_present_manifestFetchRequest && that_present_manifestFetchRequest))
        return false;
      if (!this.manifestFetchRequest.equals(that.manifestFetchRequest))
        return false;
    }

    boolean this_present_manifestDeleteRequest = true && this.isSetManifestDeleteRequest();
    boolean that_present_manifestDeleteRequest = true && that.isSetManifestDeleteRequest();
    if (this_present_manifestDeleteRequest || that_present_manifestDeleteRequest) {
      if (!(this_present_manifestDeleteRequest && that_present_manifestDeleteRequest))
        return false;
      if (!this.manifestDeleteRequest.equals(that.manifestDeleteRequest))
        return false;
    }

    boolean this_present_manifestSetRequest = true && this.isSetManifestSetRequest();
    boolean that_present_manifestSetRequest = true && that.isSetManifestSetRequest();
    if (this_present_manifestSetRequest || that_present_manifestSetRequest) {
      if (!(this_present_manifestSetRequest && that_present_manifestSetRequest))
        return false;
      if (!this.manifestSetRequest.equals(that.manifestSetRequest))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetBuckBuildId()) ? 131071 : 524287);
    if (isSetBuckBuildId())
      hashCode = hashCode * 8191 + buckBuildId.hashCode();

    hashCode = hashCode * 8191 + ((isSetPayloads()) ? 131071 : 524287);
    if (isSetPayloads())
      hashCode = hashCode * 8191 + payloads.hashCode();

    hashCode = hashCode * 8191 + ((isSetFetchRequest()) ? 131071 : 524287);
    if (isSetFetchRequest())
      hashCode = hashCode * 8191 + fetchRequest.hashCode();

    hashCode = hashCode * 8191 + ((isSetStoreRequest()) ? 131071 : 524287);
    if (isSetStoreRequest())
      hashCode = hashCode * 8191 + storeRequest.hashCode();

    hashCode = hashCode * 8191 + ((isSetMultiFetchRequest()) ? 131071 : 524287);
    if (isSetMultiFetchRequest())
      hashCode = hashCode * 8191 + multiFetchRequest.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeleteRequest()) ? 131071 : 524287);
    if (isSetDeleteRequest())
      hashCode = hashCode * 8191 + deleteRequest.hashCode();

    hashCode = hashCode * 8191 + ((isSetMultiContainsRequest()) ? 131071 : 524287);
    if (isSetMultiContainsRequest())
      hashCode = hashCode * 8191 + multiContainsRequest.hashCode();

    hashCode = hashCode * 8191 + ((isSetManifestAppendRequest()) ? 131071 : 524287);
    if (isSetManifestAppendRequest())
      hashCode = hashCode * 8191 + manifestAppendRequest.hashCode();

    hashCode = hashCode * 8191 + ((isSetManifestFetchRequest()) ? 131071 : 524287);
    if (isSetManifestFetchRequest())
      hashCode = hashCode * 8191 + manifestFetchRequest.hashCode();

    hashCode = hashCode * 8191 + ((isSetManifestDeleteRequest()) ? 131071 : 524287);
    if (isSetManifestDeleteRequest())
      hashCode = hashCode * 8191 + manifestDeleteRequest.hashCode();

    hashCode = hashCode * 8191 + ((isSetManifestSetRequest()) ? 131071 : 524287);
    if (isSetManifestSetRequest())
      hashCode = hashCode * 8191 + manifestSetRequest.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BuckCacheRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBuckBuildId()).compareTo(other.isSetBuckBuildId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuckBuildId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buckBuildId, other.buckBuildId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPayloads()).compareTo(other.isSetPayloads());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayloads()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payloads, other.payloads);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFetchRequest()).compareTo(other.isSetFetchRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchRequest, other.fetchRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStoreRequest()).compareTo(other.isSetStoreRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeRequest, other.storeRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMultiFetchRequest()).compareTo(other.isSetMultiFetchRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiFetchRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiFetchRequest, other.multiFetchRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeleteRequest()).compareTo(other.isSetDeleteRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteRequest, other.deleteRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMultiContainsRequest()).compareTo(other.isSetMultiContainsRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiContainsRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiContainsRequest, other.multiContainsRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManifestAppendRequest()).compareTo(other.isSetManifestAppendRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManifestAppendRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manifestAppendRequest, other.manifestAppendRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManifestFetchRequest()).compareTo(other.isSetManifestFetchRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManifestFetchRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manifestFetchRequest, other.manifestFetchRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManifestDeleteRequest()).compareTo(other.isSetManifestDeleteRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManifestDeleteRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manifestDeleteRequest, other.manifestDeleteRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetManifestSetRequest()).compareTo(other.isSetManifestSetRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManifestSetRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manifestSetRequest, other.manifestSetRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BuckCacheRequest(");
    boolean first = true;

    if (isSetType()) {
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetBuckBuildId()) {
      if (!first) sb.append(", ");
      sb.append("buckBuildId:");
      if (this.buckBuildId == null) {
        sb.append("null");
      } else {
        sb.append(this.buckBuildId);
      }
      first = false;
    }
    if (isSetPayloads()) {
      if (!first) sb.append(", ");
      sb.append("payloads:");
      if (this.payloads == null) {
        sb.append("null");
      } else {
        sb.append(this.payloads);
      }
      first = false;
    }
    if (isSetFetchRequest()) {
      if (!first) sb.append(", ");
      sb.append("fetchRequest:");
      if (this.fetchRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.fetchRequest);
      }
      first = false;
    }
    if (isSetStoreRequest()) {
      if (!first) sb.append(", ");
      sb.append("storeRequest:");
      if (this.storeRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.storeRequest);
      }
      first = false;
    }
    if (isSetMultiFetchRequest()) {
      if (!first) sb.append(", ");
      sb.append("multiFetchRequest:");
      if (this.multiFetchRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.multiFetchRequest);
      }
      first = false;
    }
    if (isSetDeleteRequest()) {
      if (!first) sb.append(", ");
      sb.append("deleteRequest:");
      if (this.deleteRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.deleteRequest);
      }
      first = false;
    }
    if (isSetMultiContainsRequest()) {
      if (!first) sb.append(", ");
      sb.append("multiContainsRequest:");
      if (this.multiContainsRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.multiContainsRequest);
      }
      first = false;
    }
    if (isSetManifestAppendRequest()) {
      if (!first) sb.append(", ");
      sb.append("manifestAppendRequest:");
      if (this.manifestAppendRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.manifestAppendRequest);
      }
      first = false;
    }
    if (isSetManifestFetchRequest()) {
      if (!first) sb.append(", ");
      sb.append("manifestFetchRequest:");
      if (this.manifestFetchRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.manifestFetchRequest);
      }
      first = false;
    }
    if (isSetManifestDeleteRequest()) {
      if (!first) sb.append(", ");
      sb.append("manifestDeleteRequest:");
      if (this.manifestDeleteRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.manifestDeleteRequest);
      }
      first = false;
    }
    if (isSetManifestSetRequest()) {
      if (!first) sb.append(", ");
      sb.append("manifestSetRequest:");
      if (this.manifestSetRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.manifestSetRequest);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (fetchRequest != null) {
      fetchRequest.validate();
    }
    if (storeRequest != null) {
      storeRequest.validate();
    }
    if (multiFetchRequest != null) {
      multiFetchRequest.validate();
    }
    if (deleteRequest != null) {
      deleteRequest.validate();
    }
    if (multiContainsRequest != null) {
      multiContainsRequest.validate();
    }
    if (manifestAppendRequest != null) {
      manifestAppendRequest.validate();
    }
    if (manifestFetchRequest != null) {
      manifestFetchRequest.validate();
    }
    if (manifestDeleteRequest != null) {
      manifestDeleteRequest.validate();
    }
    if (manifestSetRequest != null) {
      manifestSetRequest.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BuckCacheRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuckCacheRequestStandardScheme getScheme() {
      return new BuckCacheRequestStandardScheme();
    }
  }

  private static class BuckCacheRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<BuckCacheRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BuckCacheRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.facebook.buck.artifact_cache.thrift.BuckCacheRequestType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUCK_BUILD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buckBuildId = iprot.readString();
              struct.setBuckBuildIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // PAYLOADS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                struct.payloads = new java.util.ArrayList<PayloadInfo>(_list106.size);
                PayloadInfo _elem107;
                for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                {
                  _elem107 = new PayloadInfo();
                  _elem107.read(iprot);
                  struct.payloads.add(_elem107);
                }
                iprot.readListEnd();
              }
              struct.setPayloadsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // FETCH_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fetchRequest = new BuckCacheFetchRequest();
              struct.fetchRequest.read(iprot);
              struct.setFetchRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // STORE_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.storeRequest = new BuckCacheStoreRequest();
              struct.storeRequest.read(iprot);
              struct.setStoreRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // MULTI_FETCH_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.multiFetchRequest = new BuckCacheMultiFetchRequest();
              struct.multiFetchRequest.read(iprot);
              struct.setMultiFetchRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // DELETE_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deleteRequest = new BuckCacheDeleteRequest();
              struct.deleteRequest.read(iprot);
              struct.setDeleteRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // MULTI_CONTAINS_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.multiContainsRequest = new BuckCacheMultiContainsRequest();
              struct.multiContainsRequest.read(iprot);
              struct.setMultiContainsRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // MANIFEST_APPEND_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.manifestAppendRequest = new ManifestAppendRequest();
              struct.manifestAppendRequest.read(iprot);
              struct.setManifestAppendRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 109: // MANIFEST_FETCH_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.manifestFetchRequest = new ManifestFetchRequest();
              struct.manifestFetchRequest.read(iprot);
              struct.setManifestFetchRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // MANIFEST_DELETE_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.manifestDeleteRequest = new ManifestDeleteRequest();
              struct.manifestDeleteRequest.read(iprot);
              struct.setManifestDeleteRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 111: // MANIFEST_SET_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.manifestSetRequest = new ManifestSetRequest();
              struct.manifestSetRequest.read(iprot);
              struct.setManifestSetRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BuckCacheRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.buckBuildId != null) {
        if (struct.isSetBuckBuildId()) {
          oprot.writeFieldBegin(BUCK_BUILD_ID_FIELD_DESC);
          oprot.writeString(struct.buckBuildId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.payloads != null) {
        if (struct.isSetPayloads()) {
          oprot.writeFieldBegin(PAYLOADS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.payloads.size()));
            for (PayloadInfo _iter109 : struct.payloads)
            {
              _iter109.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.fetchRequest != null) {
        if (struct.isSetFetchRequest()) {
          oprot.writeFieldBegin(FETCH_REQUEST_FIELD_DESC);
          struct.fetchRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.storeRequest != null) {
        if (struct.isSetStoreRequest()) {
          oprot.writeFieldBegin(STORE_REQUEST_FIELD_DESC);
          struct.storeRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiFetchRequest != null) {
        if (struct.isSetMultiFetchRequest()) {
          oprot.writeFieldBegin(MULTI_FETCH_REQUEST_FIELD_DESC);
          struct.multiFetchRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deleteRequest != null) {
        if (struct.isSetDeleteRequest()) {
          oprot.writeFieldBegin(DELETE_REQUEST_FIELD_DESC);
          struct.deleteRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiContainsRequest != null) {
        if (struct.isSetMultiContainsRequest()) {
          oprot.writeFieldBegin(MULTI_CONTAINS_REQUEST_FIELD_DESC);
          struct.multiContainsRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.manifestAppendRequest != null) {
        if (struct.isSetManifestAppendRequest()) {
          oprot.writeFieldBegin(MANIFEST_APPEND_REQUEST_FIELD_DESC);
          struct.manifestAppendRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.manifestFetchRequest != null) {
        if (struct.isSetManifestFetchRequest()) {
          oprot.writeFieldBegin(MANIFEST_FETCH_REQUEST_FIELD_DESC);
          struct.manifestFetchRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.manifestDeleteRequest != null) {
        if (struct.isSetManifestDeleteRequest()) {
          oprot.writeFieldBegin(MANIFEST_DELETE_REQUEST_FIELD_DESC);
          struct.manifestDeleteRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.manifestSetRequest != null) {
        if (struct.isSetManifestSetRequest()) {
          oprot.writeFieldBegin(MANIFEST_SET_REQUEST_FIELD_DESC);
          struct.manifestSetRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BuckCacheRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BuckCacheRequestTupleScheme getScheme() {
      return new BuckCacheRequestTupleScheme();
    }
  }

  private static class BuckCacheRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<BuckCacheRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BuckCacheRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetBuckBuildId()) {
        optionals.set(1);
      }
      if (struct.isSetPayloads()) {
        optionals.set(2);
      }
      if (struct.isSetFetchRequest()) {
        optionals.set(3);
      }
      if (struct.isSetStoreRequest()) {
        optionals.set(4);
      }
      if (struct.isSetMultiFetchRequest()) {
        optionals.set(5);
      }
      if (struct.isSetDeleteRequest()) {
        optionals.set(6);
      }
      if (struct.isSetMultiContainsRequest()) {
        optionals.set(7);
      }
      if (struct.isSetManifestAppendRequest()) {
        optionals.set(8);
      }
      if (struct.isSetManifestFetchRequest()) {
        optionals.set(9);
      }
      if (struct.isSetManifestDeleteRequest()) {
        optionals.set(10);
      }
      if (struct.isSetManifestSetRequest()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetBuckBuildId()) {
        oprot.writeString(struct.buckBuildId);
      }
      if (struct.isSetPayloads()) {
        {
          oprot.writeI32(struct.payloads.size());
          for (PayloadInfo _iter110 : struct.payloads)
          {
            _iter110.write(oprot);
          }
        }
      }
      if (struct.isSetFetchRequest()) {
        struct.fetchRequest.write(oprot);
      }
      if (struct.isSetStoreRequest()) {
        struct.storeRequest.write(oprot);
      }
      if (struct.isSetMultiFetchRequest()) {
        struct.multiFetchRequest.write(oprot);
      }
      if (struct.isSetDeleteRequest()) {
        struct.deleteRequest.write(oprot);
      }
      if (struct.isSetMultiContainsRequest()) {
        struct.multiContainsRequest.write(oprot);
      }
      if (struct.isSetManifestAppendRequest()) {
        struct.manifestAppendRequest.write(oprot);
      }
      if (struct.isSetManifestFetchRequest()) {
        struct.manifestFetchRequest.write(oprot);
      }
      if (struct.isSetManifestDeleteRequest()) {
        struct.manifestDeleteRequest.write(oprot);
      }
      if (struct.isSetManifestSetRequest()) {
        struct.manifestSetRequest.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BuckCacheRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.type = com.facebook.buck.artifact_cache.thrift.BuckCacheRequestType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.buckBuildId = iprot.readString();
        struct.setBuckBuildIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.payloads = new java.util.ArrayList<PayloadInfo>(_list111.size);
          PayloadInfo _elem112;
          for (int _i113 = 0; _i113 < _list111.size; ++_i113)
          {
            _elem112 = new PayloadInfo();
            _elem112.read(iprot);
            struct.payloads.add(_elem112);
          }
        }
        struct.setPayloadsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fetchRequest = new BuckCacheFetchRequest();
        struct.fetchRequest.read(iprot);
        struct.setFetchRequestIsSet(true);
      }
      if (incoming.get(4)) {
        struct.storeRequest = new BuckCacheStoreRequest();
        struct.storeRequest.read(iprot);
        struct.setStoreRequestIsSet(true);
      }
      if (incoming.get(5)) {
        struct.multiFetchRequest = new BuckCacheMultiFetchRequest();
        struct.multiFetchRequest.read(iprot);
        struct.setMultiFetchRequestIsSet(true);
      }
      if (incoming.get(6)) {
        struct.deleteRequest = new BuckCacheDeleteRequest();
        struct.deleteRequest.read(iprot);
        struct.setDeleteRequestIsSet(true);
      }
      if (incoming.get(7)) {
        struct.multiContainsRequest = new BuckCacheMultiContainsRequest();
        struct.multiContainsRequest.read(iprot);
        struct.setMultiContainsRequestIsSet(true);
      }
      if (incoming.get(8)) {
        struct.manifestAppendRequest = new ManifestAppendRequest();
        struct.manifestAppendRequest.read(iprot);
        struct.setManifestAppendRequestIsSet(true);
      }
      if (incoming.get(9)) {
        struct.manifestFetchRequest = new ManifestFetchRequest();
        struct.manifestFetchRequest.read(iprot);
        struct.setManifestFetchRequestIsSet(true);
      }
      if (incoming.get(10)) {
        struct.manifestDeleteRequest = new ManifestDeleteRequest();
        struct.manifestDeleteRequest.read(iprot);
        struct.setManifestDeleteRequestIsSet(true);
      }
      if (incoming.get(11)) {
        struct.manifestSetRequest = new ManifestSetRequest();
        struct.manifestSetRequest.read(iprot);
        struct.setManifestSetRequestIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

