/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.query.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-01")
public class DirectedAcyclicGraphEdge implements org.apache.thrift.TBase<DirectedAcyclicGraphEdge, DirectedAcyclicGraphEdge._Fields>, java.io.Serializable, Cloneable, Comparable<DirectedAcyclicGraphEdge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DirectedAcyclicGraphEdge");

  private static final org.apache.thrift.protocol.TField FROM_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromNode", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TO_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("toNode", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DirectedAcyclicGraphEdgeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DirectedAcyclicGraphEdgeTupleSchemeFactory();

  public DirectedAcyclicGraphNode fromNode; // required
  public DirectedAcyclicGraphNode toNode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FROM_NODE((short)1, "fromNode"),
    TO_NODE((short)2, "toNode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FROM_NODE
          return FROM_NODE;
        case 2: // TO_NODE
          return TO_NODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM_NODE, new org.apache.thrift.meta_data.FieldMetaData("fromNode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DirectedAcyclicGraphNode.class)));
    tmpMap.put(_Fields.TO_NODE, new org.apache.thrift.meta_data.FieldMetaData("toNode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DirectedAcyclicGraphNode.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DirectedAcyclicGraphEdge.class, metaDataMap);
  }

  public DirectedAcyclicGraphEdge() {
  }

  public DirectedAcyclicGraphEdge(
    DirectedAcyclicGraphNode fromNode,
    DirectedAcyclicGraphNode toNode)
  {
    this();
    this.fromNode = fromNode;
    this.toNode = toNode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DirectedAcyclicGraphEdge(DirectedAcyclicGraphEdge other) {
    if (other.isSetFromNode()) {
      this.fromNode = new DirectedAcyclicGraphNode(other.fromNode);
    }
    if (other.isSetToNode()) {
      this.toNode = new DirectedAcyclicGraphNode(other.toNode);
    }
  }

  public DirectedAcyclicGraphEdge deepCopy() {
    return new DirectedAcyclicGraphEdge(this);
  }

  @Override
  public void clear() {
    this.fromNode = null;
    this.toNode = null;
  }

  public DirectedAcyclicGraphNode getFromNode() {
    return this.fromNode;
  }

  public DirectedAcyclicGraphEdge setFromNode(DirectedAcyclicGraphNode fromNode) {
    this.fromNode = fromNode;
    return this;
  }

  public void unsetFromNode() {
    this.fromNode = null;
  }

  /** Returns true if field fromNode is set (has been assigned a value) and false otherwise */
  public boolean isSetFromNode() {
    return this.fromNode != null;
  }

  public void setFromNodeIsSet(boolean value) {
    if (!value) {
      this.fromNode = null;
    }
  }

  public DirectedAcyclicGraphNode getToNode() {
    return this.toNode;
  }

  public DirectedAcyclicGraphEdge setToNode(DirectedAcyclicGraphNode toNode) {
    this.toNode = toNode;
    return this;
  }

  public void unsetToNode() {
    this.toNode = null;
  }

  /** Returns true if field toNode is set (has been assigned a value) and false otherwise */
  public boolean isSetToNode() {
    return this.toNode != null;
  }

  public void setToNodeIsSet(boolean value) {
    if (!value) {
      this.toNode = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FROM_NODE:
      if (value == null) {
        unsetFromNode();
      } else {
        setFromNode((DirectedAcyclicGraphNode)value);
      }
      break;

    case TO_NODE:
      if (value == null) {
        unsetToNode();
      } else {
        setToNode((DirectedAcyclicGraphNode)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM_NODE:
      return getFromNode();

    case TO_NODE:
      return getToNode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FROM_NODE:
      return isSetFromNode();
    case TO_NODE:
      return isSetToNode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DirectedAcyclicGraphEdge)
      return this.equals((DirectedAcyclicGraphEdge)that);
    return false;
  }

  public boolean equals(DirectedAcyclicGraphEdge that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fromNode = true && this.isSetFromNode();
    boolean that_present_fromNode = true && that.isSetFromNode();
    if (this_present_fromNode || that_present_fromNode) {
      if (!(this_present_fromNode && that_present_fromNode))
        return false;
      if (!this.fromNode.equals(that.fromNode))
        return false;
    }

    boolean this_present_toNode = true && this.isSetToNode();
    boolean that_present_toNode = true && that.isSetToNode();
    if (this_present_toNode || that_present_toNode) {
      if (!(this_present_toNode && that_present_toNode))
        return false;
      if (!this.toNode.equals(that.toNode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFromNode()) ? 131071 : 524287);
    if (isSetFromNode())
      hashCode = hashCode * 8191 + fromNode.hashCode();

    hashCode = hashCode * 8191 + ((isSetToNode()) ? 131071 : 524287);
    if (isSetToNode())
      hashCode = hashCode * 8191 + toNode.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DirectedAcyclicGraphEdge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFromNode()).compareTo(other.isSetFromNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromNode, other.fromNode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToNode()).compareTo(other.isSetToNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toNode, other.toNode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DirectedAcyclicGraphEdge(");
    boolean first = true;

    sb.append("fromNode:");
    if (this.fromNode == null) {
      sb.append("null");
    } else {
      sb.append(this.fromNode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toNode:");
    if (this.toNode == null) {
      sb.append("null");
    } else {
      sb.append(this.toNode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (fromNode != null) {
      fromNode.validate();
    }
    if (toNode != null) {
      toNode.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DirectedAcyclicGraphEdgeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DirectedAcyclicGraphEdgeStandardScheme getScheme() {
      return new DirectedAcyclicGraphEdgeStandardScheme();
    }
  }

  private static class DirectedAcyclicGraphEdgeStandardScheme extends org.apache.thrift.scheme.StandardScheme<DirectedAcyclicGraphEdge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DirectedAcyclicGraphEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FROM_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fromNode = new DirectedAcyclicGraphNode();
              struct.fromNode.read(iprot);
              struct.setFromNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.toNode = new DirectedAcyclicGraphNode();
              struct.toNode.read(iprot);
              struct.setToNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DirectedAcyclicGraphEdge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fromNode != null) {
        oprot.writeFieldBegin(FROM_NODE_FIELD_DESC);
        struct.fromNode.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.toNode != null) {
        oprot.writeFieldBegin(TO_NODE_FIELD_DESC);
        struct.toNode.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DirectedAcyclicGraphEdgeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DirectedAcyclicGraphEdgeTupleScheme getScheme() {
      return new DirectedAcyclicGraphEdgeTupleScheme();
    }
  }

  private static class DirectedAcyclicGraphEdgeTupleScheme extends org.apache.thrift.scheme.TupleScheme<DirectedAcyclicGraphEdge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DirectedAcyclicGraphEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFromNode()) {
        optionals.set(0);
      }
      if (struct.isSetToNode()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFromNode()) {
        struct.fromNode.write(oprot);
      }
      if (struct.isSetToNode()) {
        struct.toNode.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DirectedAcyclicGraphEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.fromNode = new DirectedAcyclicGraphNode();
        struct.fromNode.read(iprot);
        struct.setFromNodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.toNode = new DirectedAcyclicGraphNode();
        struct.toNode.read(iprot);
        struct.setToNodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

