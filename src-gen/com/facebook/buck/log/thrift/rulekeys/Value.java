/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.log.thrift.rulekeys;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Value extends org.apache.thrift.TUnion<Value, Value._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Value");
  private static final org.apache.thrift.protocol.TField STRING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValue", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("numberValue", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField BOOL_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("boolValue", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField NULL_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("nullValue", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField HASHED_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("hashedPath", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField SHA1_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("sha1Hash", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("pattern", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField BYTE_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("byteArray", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField CONTAINER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("containerMap", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField CONTAINER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("containerList", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField RULE_KEY_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleKeyHash", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField ARCHIVE_MEMBER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveMemberPath", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField BUILD_RULE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("buildRuleType", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField WRAPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("wrapper", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField BUILD_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("buildTarget", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField TARGET_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("targetPath", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRUCT, (short)19);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRING_VALUE((short)1, "stringValue"),
    NUMBER_VALUE((short)2, "numberValue"),
    BOOL_VALUE((short)3, "boolValue"),
    NULL_VALUE((short)4, "nullValue"),
    HASHED_PATH((short)5, "hashedPath"),
    PATH((short)6, "path"),
    SHA1_HASH((short)7, "sha1Hash"),
    PATTERN((short)8, "pattern"),
    BYTE_ARRAY((short)9, "byteArray"),
    CONTAINER_MAP((short)10, "containerMap"),
    CONTAINER_LIST((short)11, "containerList"),
    RULE_KEY_HASH((short)12, "ruleKeyHash"),
    ARCHIVE_MEMBER_PATH((short)13, "archiveMemberPath"),
    BUILD_RULE_TYPE((short)15, "buildRuleType"),
    WRAPPER((short)16, "wrapper"),
    BUILD_TARGET((short)17, "buildTarget"),
    TARGET_PATH((short)18, "targetPath"),
    KEY((short)19, "key");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRING_VALUE
          return STRING_VALUE;
        case 2: // NUMBER_VALUE
          return NUMBER_VALUE;
        case 3: // BOOL_VALUE
          return BOOL_VALUE;
        case 4: // NULL_VALUE
          return NULL_VALUE;
        case 5: // HASHED_PATH
          return HASHED_PATH;
        case 6: // PATH
          return PATH;
        case 7: // SHA1_HASH
          return SHA1_HASH;
        case 8: // PATTERN
          return PATTERN;
        case 9: // BYTE_ARRAY
          return BYTE_ARRAY;
        case 10: // CONTAINER_MAP
          return CONTAINER_MAP;
        case 11: // CONTAINER_LIST
          return CONTAINER_LIST;
        case 12: // RULE_KEY_HASH
          return RULE_KEY_HASH;
        case 13: // ARCHIVE_MEMBER_PATH
          return ARCHIVE_MEMBER_PATH;
        case 15: // BUILD_RULE_TYPE
          return BUILD_RULE_TYPE;
        case 16: // WRAPPER
          return WRAPPER;
        case 17: // BUILD_TARGET
          return BUILD_TARGET;
        case 18: // TARGET_PATH
          return TARGET_PATH;
        case 19: // KEY
          return KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("stringValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("numberValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BOOL_VALUE, new org.apache.thrift.meta_data.FieldMetaData("boolValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NULL_VALUE, new org.apache.thrift.meta_data.FieldMetaData("nullValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NullValue.class)));
    tmpMap.put(_Fields.HASHED_PATH, new org.apache.thrift.meta_data.FieldMetaData("hashedPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HashedPath.class)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NonHashedPath.class)));
    tmpMap.put(_Fields.SHA1_HASH, new org.apache.thrift.meta_data.FieldMetaData("sha1Hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sha1.class)));
    tmpMap.put(_Fields.PATTERN, new org.apache.thrift.meta_data.FieldMetaData("pattern", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pattern.class)));
    tmpMap.put(_Fields.BYTE_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("byteArray", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ByteArray.class)));
    tmpMap.put(_Fields.CONTAINER_MAP, new org.apache.thrift.meta_data.FieldMetaData("containerMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Value"))));
    tmpMap.put(_Fields.CONTAINER_LIST, new org.apache.thrift.meta_data.FieldMetaData("containerList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Value"))));
    tmpMap.put(_Fields.RULE_KEY_HASH, new org.apache.thrift.meta_data.FieldMetaData("ruleKeyHash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RuleKeyHash.class)));
    tmpMap.put(_Fields.ARCHIVE_MEMBER_PATH, new org.apache.thrift.meta_data.FieldMetaData("archiveMemberPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ArchiveMemberPath.class)));
    tmpMap.put(_Fields.BUILD_RULE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("buildRuleType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuildRuleType.class)));
    tmpMap.put(_Fields.WRAPPER, new org.apache.thrift.meta_data.FieldMetaData("wrapper", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Wrapper.class)));
    tmpMap.put(_Fields.BUILD_TARGET, new org.apache.thrift.meta_data.FieldMetaData("buildTarget", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuildTarget.class)));
    tmpMap.put(_Fields.TARGET_PATH, new org.apache.thrift.meta_data.FieldMetaData("targetPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TargetPath.class)));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Key.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Value.class, metaDataMap);
  }

  public Value() {
    super();
  }

  public Value(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public Value(Value other) {
    super(other);
  }
  public Value deepCopy() {
    return new Value(this);
  }

  public static Value stringValue(java.lang.String value) {
    Value x = new Value();
    x.setStringValue(value);
    return x;
  }

  public static Value numberValue(double value) {
    Value x = new Value();
    x.setNumberValue(value);
    return x;
  }

  public static Value boolValue(boolean value) {
    Value x = new Value();
    x.setBoolValue(value);
    return x;
  }

  public static Value nullValue(NullValue value) {
    Value x = new Value();
    x.setNullValue(value);
    return x;
  }

  public static Value hashedPath(HashedPath value) {
    Value x = new Value();
    x.setHashedPath(value);
    return x;
  }

  public static Value path(NonHashedPath value) {
    Value x = new Value();
    x.setPath(value);
    return x;
  }

  public static Value sha1Hash(Sha1 value) {
    Value x = new Value();
    x.setSha1Hash(value);
    return x;
  }

  public static Value pattern(Pattern value) {
    Value x = new Value();
    x.setPattern(value);
    return x;
  }

  public static Value byteArray(ByteArray value) {
    Value x = new Value();
    x.setByteArray(value);
    return x;
  }

  public static Value containerMap(java.util.Map<java.lang.String,Value> value) {
    Value x = new Value();
    x.setContainerMap(value);
    return x;
  }

  public static Value containerList(java.util.List<Value> value) {
    Value x = new Value();
    x.setContainerList(value);
    return x;
  }

  public static Value ruleKeyHash(RuleKeyHash value) {
    Value x = new Value();
    x.setRuleKeyHash(value);
    return x;
  }

  public static Value archiveMemberPath(ArchiveMemberPath value) {
    Value x = new Value();
    x.setArchiveMemberPath(value);
    return x;
  }

  public static Value buildRuleType(BuildRuleType value) {
    Value x = new Value();
    x.setBuildRuleType(value);
    return x;
  }

  public static Value wrapper(Wrapper value) {
    Value x = new Value();
    x.setWrapper(value);
    return x;
  }

  public static Value buildTarget(BuildTarget value) {
    Value x = new Value();
    x.setBuildTarget(value);
    return x;
  }

  public static Value targetPath(TargetPath value) {
    Value x = new Value();
    x.setTargetPath(value);
    return x;
  }

  public static Value key(Key value) {
    Value x = new Value();
    x.setKey(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case STRING_VALUE:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'stringValue', but got " + value.getClass().getSimpleName());
      case NUMBER_VALUE:
        if (value instanceof java.lang.Double) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Double for field 'numberValue', but got " + value.getClass().getSimpleName());
      case BOOL_VALUE:
        if (value instanceof java.lang.Boolean) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Boolean for field 'boolValue', but got " + value.getClass().getSimpleName());
      case NULL_VALUE:
        if (value instanceof NullValue) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type NullValue for field 'nullValue', but got " + value.getClass().getSimpleName());
      case HASHED_PATH:
        if (value instanceof HashedPath) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type HashedPath for field 'hashedPath', but got " + value.getClass().getSimpleName());
      case PATH:
        if (value instanceof NonHashedPath) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type NonHashedPath for field 'path', but got " + value.getClass().getSimpleName());
      case SHA1_HASH:
        if (value instanceof Sha1) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type Sha1 for field 'sha1Hash', but got " + value.getClass().getSimpleName());
      case PATTERN:
        if (value instanceof Pattern) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type Pattern for field 'pattern', but got " + value.getClass().getSimpleName());
      case BYTE_ARRAY:
        if (value instanceof ByteArray) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type ByteArray for field 'byteArray', but got " + value.getClass().getSimpleName());
      case CONTAINER_MAP:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.Map<java.lang.String,Value> for field 'containerMap', but got " + value.getClass().getSimpleName());
      case CONTAINER_LIST:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<Value> for field 'containerList', but got " + value.getClass().getSimpleName());
      case RULE_KEY_HASH:
        if (value instanceof RuleKeyHash) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type RuleKeyHash for field 'ruleKeyHash', but got " + value.getClass().getSimpleName());
      case ARCHIVE_MEMBER_PATH:
        if (value instanceof ArchiveMemberPath) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type ArchiveMemberPath for field 'archiveMemberPath', but got " + value.getClass().getSimpleName());
      case BUILD_RULE_TYPE:
        if (value instanceof BuildRuleType) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type BuildRuleType for field 'buildRuleType', but got " + value.getClass().getSimpleName());
      case WRAPPER:
        if (value instanceof Wrapper) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type Wrapper for field 'wrapper', but got " + value.getClass().getSimpleName());
      case BUILD_TARGET:
        if (value instanceof BuildTarget) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type BuildTarget for field 'buildTarget', but got " + value.getClass().getSimpleName());
      case TARGET_PATH:
        if (value instanceof TargetPath) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type TargetPath for field 'targetPath', but got " + value.getClass().getSimpleName());
      case KEY:
        if (value instanceof Key) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type Key for field 'key', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case STRING_VALUE:
          if (field.type == STRING_VALUE_FIELD_DESC.type) {
            java.lang.String stringValue;
            stringValue = iprot.readString();
            return stringValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NUMBER_VALUE:
          if (field.type == NUMBER_VALUE_FIELD_DESC.type) {
            java.lang.Double numberValue;
            numberValue = iprot.readDouble();
            return numberValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BOOL_VALUE:
          if (field.type == BOOL_VALUE_FIELD_DESC.type) {
            java.lang.Boolean boolValue;
            boolValue = iprot.readBool();
            return boolValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NULL_VALUE:
          if (field.type == NULL_VALUE_FIELD_DESC.type) {
            NullValue nullValue;
            nullValue = new NullValue();
            nullValue.read(iprot);
            return nullValue;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HASHED_PATH:
          if (field.type == HASHED_PATH_FIELD_DESC.type) {
            HashedPath hashedPath;
            hashedPath = new HashedPath();
            hashedPath.read(iprot);
            return hashedPath;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PATH:
          if (field.type == PATH_FIELD_DESC.type) {
            NonHashedPath path;
            path = new NonHashedPath();
            path.read(iprot);
            return path;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SHA1_HASH:
          if (field.type == SHA1_HASH_FIELD_DESC.type) {
            Sha1 sha1Hash;
            sha1Hash = new Sha1();
            sha1Hash.read(iprot);
            return sha1Hash;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PATTERN:
          if (field.type == PATTERN_FIELD_DESC.type) {
            Pattern pattern;
            pattern = new Pattern();
            pattern.read(iprot);
            return pattern;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BYTE_ARRAY:
          if (field.type == BYTE_ARRAY_FIELD_DESC.type) {
            ByteArray byteArray;
            byteArray = new ByteArray();
            byteArray.read(iprot);
            return byteArray;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CONTAINER_MAP:
          if (field.type == CONTAINER_MAP_FIELD_DESC.type) {
            java.util.Map<java.lang.String,Value> containerMap;
            {
              org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
              containerMap = new java.util.HashMap<java.lang.String,Value>(2*_map0.size);
              java.lang.String _key1;
              Value _val2;
              for (int _i3 = 0; _i3 < _map0.size; ++_i3)
              {
                _key1 = iprot.readString();
                _val2 = new Value();
                _val2.read(iprot);
                containerMap.put(_key1, _val2);
              }
              iprot.readMapEnd();
            }
            return containerMap;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CONTAINER_LIST:
          if (field.type == CONTAINER_LIST_FIELD_DESC.type) {
            java.util.List<Value> containerList;
            {
              org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
              containerList = new java.util.ArrayList<Value>(_list4.size);
              Value _elem5;
              for (int _i6 = 0; _i6 < _list4.size; ++_i6)
              {
                _elem5 = new Value();
                _elem5.read(iprot);
                containerList.add(_elem5);
              }
              iprot.readListEnd();
            }
            return containerList;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RULE_KEY_HASH:
          if (field.type == RULE_KEY_HASH_FIELD_DESC.type) {
            RuleKeyHash ruleKeyHash;
            ruleKeyHash = new RuleKeyHash();
            ruleKeyHash.read(iprot);
            return ruleKeyHash;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARCHIVE_MEMBER_PATH:
          if (field.type == ARCHIVE_MEMBER_PATH_FIELD_DESC.type) {
            ArchiveMemberPath archiveMemberPath;
            archiveMemberPath = new ArchiveMemberPath();
            archiveMemberPath.read(iprot);
            return archiveMemberPath;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BUILD_RULE_TYPE:
          if (field.type == BUILD_RULE_TYPE_FIELD_DESC.type) {
            BuildRuleType buildRuleType;
            buildRuleType = new BuildRuleType();
            buildRuleType.read(iprot);
            return buildRuleType;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case WRAPPER:
          if (field.type == WRAPPER_FIELD_DESC.type) {
            Wrapper wrapper;
            wrapper = new Wrapper();
            wrapper.read(iprot);
            return wrapper;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BUILD_TARGET:
          if (field.type == BUILD_TARGET_FIELD_DESC.type) {
            BuildTarget buildTarget;
            buildTarget = new BuildTarget();
            buildTarget.read(iprot);
            return buildTarget;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TARGET_PATH:
          if (field.type == TARGET_PATH_FIELD_DESC.type) {
            TargetPath targetPath;
            targetPath = new TargetPath();
            targetPath.read(iprot);
            return targetPath;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case KEY:
          if (field.type == KEY_FIELD_DESC.type) {
            Key key;
            key = new Key();
            key.read(iprot);
            return key;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case STRING_VALUE:
        java.lang.String stringValue = (java.lang.String)value_;
        oprot.writeString(stringValue);
        return;
      case NUMBER_VALUE:
        java.lang.Double numberValue = (java.lang.Double)value_;
        oprot.writeDouble(numberValue);
        return;
      case BOOL_VALUE:
        java.lang.Boolean boolValue = (java.lang.Boolean)value_;
        oprot.writeBool(boolValue);
        return;
      case NULL_VALUE:
        NullValue nullValue = (NullValue)value_;
        nullValue.write(oprot);
        return;
      case HASHED_PATH:
        HashedPath hashedPath = (HashedPath)value_;
        hashedPath.write(oprot);
        return;
      case PATH:
        NonHashedPath path = (NonHashedPath)value_;
        path.write(oprot);
        return;
      case SHA1_HASH:
        Sha1 sha1Hash = (Sha1)value_;
        sha1Hash.write(oprot);
        return;
      case PATTERN:
        Pattern pattern = (Pattern)value_;
        pattern.write(oprot);
        return;
      case BYTE_ARRAY:
        ByteArray byteArray = (ByteArray)value_;
        byteArray.write(oprot);
        return;
      case CONTAINER_MAP:
        java.util.Map<java.lang.String,Value> containerMap = (java.util.Map<java.lang.String,Value>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, containerMap.size()));
          for (java.util.Map.Entry<java.lang.String, Value> _iter7 : containerMap.entrySet())
          {
            oprot.writeString(_iter7.getKey());
            _iter7.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case CONTAINER_LIST:
        java.util.List<Value> containerList = (java.util.List<Value>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, containerList.size()));
          for (Value _iter8 : containerList)
          {
            _iter8.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case RULE_KEY_HASH:
        RuleKeyHash ruleKeyHash = (RuleKeyHash)value_;
        ruleKeyHash.write(oprot);
        return;
      case ARCHIVE_MEMBER_PATH:
        ArchiveMemberPath archiveMemberPath = (ArchiveMemberPath)value_;
        archiveMemberPath.write(oprot);
        return;
      case BUILD_RULE_TYPE:
        BuildRuleType buildRuleType = (BuildRuleType)value_;
        buildRuleType.write(oprot);
        return;
      case WRAPPER:
        Wrapper wrapper = (Wrapper)value_;
        wrapper.write(oprot);
        return;
      case BUILD_TARGET:
        BuildTarget buildTarget = (BuildTarget)value_;
        buildTarget.write(oprot);
        return;
      case TARGET_PATH:
        TargetPath targetPath = (TargetPath)value_;
        targetPath.write(oprot);
        return;
      case KEY:
        Key key = (Key)value_;
        key.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case STRING_VALUE:
          java.lang.String stringValue;
          stringValue = iprot.readString();
          return stringValue;
        case NUMBER_VALUE:
          java.lang.Double numberValue;
          numberValue = iprot.readDouble();
          return numberValue;
        case BOOL_VALUE:
          java.lang.Boolean boolValue;
          boolValue = iprot.readBool();
          return boolValue;
        case NULL_VALUE:
          NullValue nullValue;
          nullValue = new NullValue();
          nullValue.read(iprot);
          return nullValue;
        case HASHED_PATH:
          HashedPath hashedPath;
          hashedPath = new HashedPath();
          hashedPath.read(iprot);
          return hashedPath;
        case PATH:
          NonHashedPath path;
          path = new NonHashedPath();
          path.read(iprot);
          return path;
        case SHA1_HASH:
          Sha1 sha1Hash;
          sha1Hash = new Sha1();
          sha1Hash.read(iprot);
          return sha1Hash;
        case PATTERN:
          Pattern pattern;
          pattern = new Pattern();
          pattern.read(iprot);
          return pattern;
        case BYTE_ARRAY:
          ByteArray byteArray;
          byteArray = new ByteArray();
          byteArray.read(iprot);
          return byteArray;
        case CONTAINER_MAP:
          java.util.Map<java.lang.String,Value> containerMap;
          {
            org.apache.thrift.protocol.TMap _map9 = iprot.readMapBegin();
            containerMap = new java.util.HashMap<java.lang.String,Value>(2*_map9.size);
            java.lang.String _key10;
            Value _val11;
            for (int _i12 = 0; _i12 < _map9.size; ++_i12)
            {
              _key10 = iprot.readString();
              _val11 = new Value();
              _val11.read(iprot);
              containerMap.put(_key10, _val11);
            }
            iprot.readMapEnd();
          }
          return containerMap;
        case CONTAINER_LIST:
          java.util.List<Value> containerList;
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
            containerList = new java.util.ArrayList<Value>(_list13.size);
            Value _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new Value();
              _elem14.read(iprot);
              containerList.add(_elem14);
            }
            iprot.readListEnd();
          }
          return containerList;
        case RULE_KEY_HASH:
          RuleKeyHash ruleKeyHash;
          ruleKeyHash = new RuleKeyHash();
          ruleKeyHash.read(iprot);
          return ruleKeyHash;
        case ARCHIVE_MEMBER_PATH:
          ArchiveMemberPath archiveMemberPath;
          archiveMemberPath = new ArchiveMemberPath();
          archiveMemberPath.read(iprot);
          return archiveMemberPath;
        case BUILD_RULE_TYPE:
          BuildRuleType buildRuleType;
          buildRuleType = new BuildRuleType();
          buildRuleType.read(iprot);
          return buildRuleType;
        case WRAPPER:
          Wrapper wrapper;
          wrapper = new Wrapper();
          wrapper.read(iprot);
          return wrapper;
        case BUILD_TARGET:
          BuildTarget buildTarget;
          buildTarget = new BuildTarget();
          buildTarget.read(iprot);
          return buildTarget;
        case TARGET_PATH:
          TargetPath targetPath;
          targetPath = new TargetPath();
          targetPath.read(iprot);
          return targetPath;
        case KEY:
          Key key;
          key = new Key();
          key.read(iprot);
          return key;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case STRING_VALUE:
        java.lang.String stringValue = (java.lang.String)value_;
        oprot.writeString(stringValue);
        return;
      case NUMBER_VALUE:
        java.lang.Double numberValue = (java.lang.Double)value_;
        oprot.writeDouble(numberValue);
        return;
      case BOOL_VALUE:
        java.lang.Boolean boolValue = (java.lang.Boolean)value_;
        oprot.writeBool(boolValue);
        return;
      case NULL_VALUE:
        NullValue nullValue = (NullValue)value_;
        nullValue.write(oprot);
        return;
      case HASHED_PATH:
        HashedPath hashedPath = (HashedPath)value_;
        hashedPath.write(oprot);
        return;
      case PATH:
        NonHashedPath path = (NonHashedPath)value_;
        path.write(oprot);
        return;
      case SHA1_HASH:
        Sha1 sha1Hash = (Sha1)value_;
        sha1Hash.write(oprot);
        return;
      case PATTERN:
        Pattern pattern = (Pattern)value_;
        pattern.write(oprot);
        return;
      case BYTE_ARRAY:
        ByteArray byteArray = (ByteArray)value_;
        byteArray.write(oprot);
        return;
      case CONTAINER_MAP:
        java.util.Map<java.lang.String,Value> containerMap = (java.util.Map<java.lang.String,Value>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, containerMap.size()));
          for (java.util.Map.Entry<java.lang.String, Value> _iter16 : containerMap.entrySet())
          {
            oprot.writeString(_iter16.getKey());
            _iter16.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case CONTAINER_LIST:
        java.util.List<Value> containerList = (java.util.List<Value>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, containerList.size()));
          for (Value _iter17 : containerList)
          {
            _iter17.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case RULE_KEY_HASH:
        RuleKeyHash ruleKeyHash = (RuleKeyHash)value_;
        ruleKeyHash.write(oprot);
        return;
      case ARCHIVE_MEMBER_PATH:
        ArchiveMemberPath archiveMemberPath = (ArchiveMemberPath)value_;
        archiveMemberPath.write(oprot);
        return;
      case BUILD_RULE_TYPE:
        BuildRuleType buildRuleType = (BuildRuleType)value_;
        buildRuleType.write(oprot);
        return;
      case WRAPPER:
        Wrapper wrapper = (Wrapper)value_;
        wrapper.write(oprot);
        return;
      case BUILD_TARGET:
        BuildTarget buildTarget = (BuildTarget)value_;
        buildTarget.write(oprot);
        return;
      case TARGET_PATH:
        TargetPath targetPath = (TargetPath)value_;
        targetPath.write(oprot);
        return;
      case KEY:
        Key key = (Key)value_;
        key.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case STRING_VALUE:
        return STRING_VALUE_FIELD_DESC;
      case NUMBER_VALUE:
        return NUMBER_VALUE_FIELD_DESC;
      case BOOL_VALUE:
        return BOOL_VALUE_FIELD_DESC;
      case NULL_VALUE:
        return NULL_VALUE_FIELD_DESC;
      case HASHED_PATH:
        return HASHED_PATH_FIELD_DESC;
      case PATH:
        return PATH_FIELD_DESC;
      case SHA1_HASH:
        return SHA1_HASH_FIELD_DESC;
      case PATTERN:
        return PATTERN_FIELD_DESC;
      case BYTE_ARRAY:
        return BYTE_ARRAY_FIELD_DESC;
      case CONTAINER_MAP:
        return CONTAINER_MAP_FIELD_DESC;
      case CONTAINER_LIST:
        return CONTAINER_LIST_FIELD_DESC;
      case RULE_KEY_HASH:
        return RULE_KEY_HASH_FIELD_DESC;
      case ARCHIVE_MEMBER_PATH:
        return ARCHIVE_MEMBER_PATH_FIELD_DESC;
      case BUILD_RULE_TYPE:
        return BUILD_RULE_TYPE_FIELD_DESC;
      case WRAPPER:
        return WRAPPER_FIELD_DESC;
      case BUILD_TARGET:
        return BUILD_TARGET_FIELD_DESC;
      case TARGET_PATH:
        return TARGET_PATH_FIELD_DESC;
      case KEY:
        return KEY_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public java.lang.String getStringValue() {
    if (getSetField() == _Fields.STRING_VALUE) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'stringValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringValue(java.lang.String value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.STRING_VALUE;
    value_ = value;
  }

  public double getNumberValue() {
    if (getSetField() == _Fields.NUMBER_VALUE) {
      return (java.lang.Double)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'numberValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNumberValue(double value) {
    setField_ = _Fields.NUMBER_VALUE;
    value_ = value;
  }

  public boolean getBoolValue() {
    if (getSetField() == _Fields.BOOL_VALUE) {
      return (java.lang.Boolean)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'boolValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBoolValue(boolean value) {
    setField_ = _Fields.BOOL_VALUE;
    value_ = value;
  }

  public NullValue getNullValue() {
    if (getSetField() == _Fields.NULL_VALUE) {
      return (NullValue)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'nullValue' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNullValue(NullValue value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.NULL_VALUE;
    value_ = value;
  }

  public HashedPath getHashedPath() {
    if (getSetField() == _Fields.HASHED_PATH) {
      return (HashedPath)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'hashedPath' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHashedPath(HashedPath value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.HASHED_PATH;
    value_ = value;
  }

  public NonHashedPath getPath() {
    if (getSetField() == _Fields.PATH) {
      return (NonHashedPath)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'path' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPath(NonHashedPath value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.PATH;
    value_ = value;
  }

  public Sha1 getSha1Hash() {
    if (getSetField() == _Fields.SHA1_HASH) {
      return (Sha1)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'sha1Hash' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSha1Hash(Sha1 value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.SHA1_HASH;
    value_ = value;
  }

  public Pattern getPattern() {
    if (getSetField() == _Fields.PATTERN) {
      return (Pattern)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'pattern' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPattern(Pattern value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.PATTERN;
    value_ = value;
  }

  public ByteArray getByteArray() {
    if (getSetField() == _Fields.BYTE_ARRAY) {
      return (ByteArray)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'byteArray' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setByteArray(ByteArray value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.BYTE_ARRAY;
    value_ = value;
  }

  public java.util.Map<java.lang.String,Value> getContainerMap() {
    if (getSetField() == _Fields.CONTAINER_MAP) {
      return (java.util.Map<java.lang.String,Value>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'containerMap' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setContainerMap(java.util.Map<java.lang.String,Value> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.CONTAINER_MAP;
    value_ = value;
  }

  public java.util.List<Value> getContainerList() {
    if (getSetField() == _Fields.CONTAINER_LIST) {
      return (java.util.List<Value>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'containerList' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setContainerList(java.util.List<Value> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.CONTAINER_LIST;
    value_ = value;
  }

  public RuleKeyHash getRuleKeyHash() {
    if (getSetField() == _Fields.RULE_KEY_HASH) {
      return (RuleKeyHash)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'ruleKeyHash' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRuleKeyHash(RuleKeyHash value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.RULE_KEY_HASH;
    value_ = value;
  }

  public ArchiveMemberPath getArchiveMemberPath() {
    if (getSetField() == _Fields.ARCHIVE_MEMBER_PATH) {
      return (ArchiveMemberPath)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'archiveMemberPath' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArchiveMemberPath(ArchiveMemberPath value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.ARCHIVE_MEMBER_PATH;
    value_ = value;
  }

  public BuildRuleType getBuildRuleType() {
    if (getSetField() == _Fields.BUILD_RULE_TYPE) {
      return (BuildRuleType)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'buildRuleType' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBuildRuleType(BuildRuleType value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.BUILD_RULE_TYPE;
    value_ = value;
  }

  public Wrapper getWrapper() {
    if (getSetField() == _Fields.WRAPPER) {
      return (Wrapper)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'wrapper' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setWrapper(Wrapper value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.WRAPPER;
    value_ = value;
  }

  public BuildTarget getBuildTarget() {
    if (getSetField() == _Fields.BUILD_TARGET) {
      return (BuildTarget)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'buildTarget' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBuildTarget(BuildTarget value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.BUILD_TARGET;
    value_ = value;
  }

  public TargetPath getTargetPath() {
    if (getSetField() == _Fields.TARGET_PATH) {
      return (TargetPath)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'targetPath' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTargetPath(TargetPath value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.TARGET_PATH;
    value_ = value;
  }

  public Key getKey() {
    if (getSetField() == _Fields.KEY) {
      return (Key)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'key' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setKey(Key value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.KEY;
    value_ = value;
  }

  public boolean isSetStringValue() {
    return setField_ == _Fields.STRING_VALUE;
  }


  public boolean isSetNumberValue() {
    return setField_ == _Fields.NUMBER_VALUE;
  }


  public boolean isSetBoolValue() {
    return setField_ == _Fields.BOOL_VALUE;
  }


  public boolean isSetNullValue() {
    return setField_ == _Fields.NULL_VALUE;
  }


  public boolean isSetHashedPath() {
    return setField_ == _Fields.HASHED_PATH;
  }


  public boolean isSetPath() {
    return setField_ == _Fields.PATH;
  }


  public boolean isSetSha1Hash() {
    return setField_ == _Fields.SHA1_HASH;
  }


  public boolean isSetPattern() {
    return setField_ == _Fields.PATTERN;
  }


  public boolean isSetByteArray() {
    return setField_ == _Fields.BYTE_ARRAY;
  }


  public boolean isSetContainerMap() {
    return setField_ == _Fields.CONTAINER_MAP;
  }


  public boolean isSetContainerList() {
    return setField_ == _Fields.CONTAINER_LIST;
  }


  public boolean isSetRuleKeyHash() {
    return setField_ == _Fields.RULE_KEY_HASH;
  }


  public boolean isSetArchiveMemberPath() {
    return setField_ == _Fields.ARCHIVE_MEMBER_PATH;
  }


  public boolean isSetBuildRuleType() {
    return setField_ == _Fields.BUILD_RULE_TYPE;
  }


  public boolean isSetWrapper() {
    return setField_ == _Fields.WRAPPER;
  }


  public boolean isSetBuildTarget() {
    return setField_ == _Fields.BUILD_TARGET;
  }


  public boolean isSetTargetPath() {
    return setField_ == _Fields.TARGET_PATH;
  }


  public boolean isSetKey() {
    return setField_ == _Fields.KEY;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof Value) {
      return equals((Value)other);
    } else {
      return false;
    }
  }

  public boolean equals(Value other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(Value other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
