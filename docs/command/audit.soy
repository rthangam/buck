/*
 * Copyright 2018-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
{namespace buck.audit}

/**
 * Use to format parameters of buck audit commands with complex syntax.
 *
 * @param name Name of the parameter; noAutoescape enables more complex
 *        syntax for subcommands.
 * @param? nodash If set, do not add "--" prefix to $name.
 * @param? alias The alias for this parameter.
 * @param desc Prose description of the parameter.
 */
{template .param}
  <li class="{css arg}"><code>{if not $nodash}--{/if}{$name|noAutoescape}</code>
  {sp}
  {if $alias}
    <code>(-{$alias})</code>
  {/if}

  {sp}
  {$desc|noAutoescape}

{/template}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'buck audit' /}
    {param navid: 'command_audit' /}
    {param prettify: true /}
    {param description}
      Provide information about the build configuration parameters, targets, and
      rules.
    {/param}
    {param content}

{call buck.command}
{param overview}

<p>
Provide information about build configuration parameters, targets, and rules.
</p>

<p>
Syntax:
</p>

<pre>buck audit &lt;command&gt; [ &lt;parameter&gt; . . . ] &lt;target&gt;  . . .</pre> 

<p>
Example:
</p>

<pre>buck audit input /&#x2F;java/com/example/app:amazing</pre>

<p>
For more examples, see the command descriptions and <strong>Examples</strong> section below.
</p>

<h2>Commands</h2>

<ul class="{css arglist}">
  {call buck.param}
    {param name: 'alias --list' /}
    {param nodash: true /}
    {param desc}
    <p>
    List the aliases declared in {call buck.buckconfig_link /} and <code>.buckconfig.local</code>.
    This command lists only the aliases, not their values. To see the values, use the <code>buck audit config</code> command.
    </p>
   {/param}
  {/call}

  {call buck.audit.param}
    {param name: 'buck audit cell' /}
    {param nodash: true /}
    {param desc}

    <p>
    List the absolute paths to the cells that are specified in 
    the {call buckconfig.repositories /} section of 
    the <code>.buckconfig</code> file that is in 
    the root of the current cell. The path to each cell is prefixed
    with the specified alias for that cell. For example:
<p>
<pre>
{literal}
$ buck audit cell 
buck: /Users/buxster/local/buck
bazel_skylib: /Users/buxster/local/buck/third-party/skylark/bazel-skylib
{/literal}
</pre>
</p>

<p>
(In this example, <code>buxster</code> is the name of the current user.)
</p>

    <p>
    If you specify the <code>--paths-only</code> parameter, Buck outputs
    only the absolute paths to the cells, without the aliases.
    </p>

<p>
<pre>
{literal}
$ buck audit cell --paths-only
/Users/buxster/local/buck
/Users/buxster/local/buck/third-party/skylark/bazel-skylib
{/literal}
</pre>
</p>

    <p>
      If your <code>.buckconfig</code> does not contain 
      a <code>[repositories]</code> section, 
      then <code>buck audit cell</code> doesn't return any output.
    </p>

   {/param}
  {/call}


  {call buck.param}
    {param name: 'classpath <targets>' /}
    {param nodash: true /}
    {param desc}
    <p>
    List the Java classpath used to run the specified targets. This does
    not work for all build rule types.
    </p>
    {/param}
  {/call}

  {call buck.audit.param}
    {param name: 'config &#x7b;&lt;section> | &lt;section.property>&#x7d; [...]' /}
    {param nodash: true /}
    {param desc}
    <p>
    List the values from <code>.buckconfig</code> (and
    {sp}<code>.buckconfig.local</code>) for the specified
    sections and properties. 
    </p>

    <p>
    If you specify only the section name, <code>buck audit config</code> lists 
    all the properties and values for that section.
    </p>

    <p>
    Note that properties and values specified 
    with {call buck.cmd_link}{param name: 'common_parameters' /}{param rendered_text: '<code>--config</code>' /}{/call} are 
    not surfaced by this command, and those properties and values
    override both <code>.buckconfig</code> and <code>.buckconfig.local</code>.
    </p>

    <p>
    Use <code>--tab</code> to get tab-delimited output. 
    </p>

    <p>
    Example: To get the C compiler and the C++ compiler, use
    </p>

<p>
<pre class="prettyprint lang-py">
{literal}
buck audit config cxx.cc cxx.cxx
{/literal}
</pre>
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
[cxx]
    cc = /usr/bin/gcc
    cxx = /usr/bin/g++
{/literal}
</pre>
</p>

<p>
or (with <code>--tab</code>)
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
buck audit config --tab cxx.cc cxx.cxx
{/literal}
</pre>
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
cxx.cc&#9;/usr/bin/gcc
cxx.cxx&#9;/usr/bin/g++
{/literal}
</pre>
</p>

    {/param}
  {/call}

  {call buck.param}
    {param name: 'dependencies <targets>' /}
    {param nodash: true /}
    {param desc}
    <p>
    List the dependencies used to build the specified targets. Results are
    listed in alphabetical order. By default, only direct dependencies
    are listed; to show transitive dependencies, use 
    the <code>--transitive</code> parameter.  To show tests for a rule, use
    the <code>--include-tests</code> parameter. This prints out a rule's
    tests as if they were dependencies of the rule.  To print out all of
    the <em>test's</em> dependencies as well, 
    combine <code>--include-tests</code> with the <code>--transitive</code> parameter. 
    </p>
    {/param}
  {/call}

  {call buck.param}
    {param name: 'flavors <targets>' /}
    {param nodash: true /}
    {param desc}
    <p>
    List the flavors that are available for the specified targets and
    what the default flavor is for each target. 
    If the <code>flavors</code> command prints <code>no flavors</code>, 
    it indicates that, although the target rule supports flavors, Buck 
    was not able to extract any. If the <code>flavors</code> command 
    prints <code>unknown</code>, it indicates that the target rule
    doesn't support flavors. The <code>flavors</code> command supports
    the <code>--json</code> parameter for JSON-formatted output.
    </p>
   {/param}
  {/call}

  {call buck.param}
    {param name: 'input <targets>' /}
    {param nodash: true /}
    {param desc}
    <p>
    List the input source and resource files used to build the
    specified targets.
    </p>
   {/param}
  {/call}

  {call buck.param}
    {param name: 'includes <build_file>' /}
    {param nodash: true /}
    {param desc}
    <p>
    List the {call buck.build_file /}s, and their extensions, that 
    are included in the specified build file.
    </p>
    {/param}
  {/call}

  {call buck.param}
    {param name: 'modules' /}
    {param nodash: true /}
    {param desc}
    <p>
    List the Java modules known by Buck as well as their content hashes and dependencies.
    </p>
    {/param}
  {/call}

  {call buck.param}
    {param name: 'ruletype <rule>' /}
    {param nodash: true /}
    {param desc}
    <p>
    Print the Python signature for the specified rule.
    </p>

/***/
{call buckaudit.example_ruletype /}

    {/param}
  {/call}

  {call buck.param}
    {param name: 'ruletypes' /}
    {param nodash: true /}
    {param desc}
    <p>
    List all the rules that Buck supports, in alphabetical order.
    </p>

<p>
<strong>Example</strong>
</p>

<p>
The following example prints <em>all</em> the rules that Buck supports.
Note that the output is truncated for brevity.
</p>

<p>
<pre>
{literal}
buck audit ruletypes
{/literal}
</pre>
</p>

<p>
<pre>
{literal}
android_aar
android_app_modularity
android_binary
android_build_config
android_bundle
android_instrumentation_apk
android_instrumentation_test
android_library
android_manifest
android_prebuilt_aar
android_resource
apk_genrule
apple_asset_catalog
apple_binary
&lt;truncated>
{/literal}
</pre>
</p>

<p>
<strong>Example</strong>
</p>

{call buckaudit.example_ruletypes /}

    {/param}
  {/call}

  {call buck.param}
    {param name: 'tests <targets> [...]' /}
    {param nodash: true /}
    {param desc}
    <p>
    List the tests for the specified targets. Results are listed in alphabetical
    order. Only tests for the specified targets are printed, though multiple
    targets may be specified on a single command line. 
    This command is intended to be used in
    conjunction with the <code>audit dependencies</code> command. For example,
    to retrieve a list of all tests for a given project, use:
    </p>
<p>
<pre>
{literal}
buck audit dependencies --transitive PROJECT | xargs buck audit tests
{/literal}
</pre>
</p>

    {/param}
  {/call}

</ul>
{/param}

{param params}

{call buck.param}
  {param name: 'include-tests' /}
  {param desc}
  <p>
  Show the tests for the specified targets. Can be combined with 
  the <code>--transitive</code> parameter. For more information, see 
  the <code>dependencies</code> command.   
  </p>
  {/param}
{/call}

{call buck.param}
  {param name: 'json' /}
  {param desc}
  <p>
  Output the results as JSON.
  </p>
  {/param}
{/call}

{call buck.param}
  {param name: 'list' /}
  {param desc}
  <p>
  List <code>.buckconfig</code> and <code>.buckconfig.local</code> aliases. 
  Used only with the <code>aliases</code> command. For more information, see 
  that command.
  </p>
  {/param}
{/call}

{call buck.param}
  {param name: 'tab' /}
  {param desc}
  <p>
  Output the results using tab delimiters.
  Used only with the <code>config</code> command. For more information, see 
  that command.
  </p>
  {/param}
{/call}

{call buck.param}
  {param name: 'transitive' /}
  {param desc}
  <p>
  Show transitive dependencies in addition to direct dependencies. Can
  be combined with the <code>--include-tests</code> parameter. For
  more information, see the <code>dependencies</code> command. 
  </p>
  {/param}
{/call}

{/param}

{param examples}

<p>
<pre class="prettyprint lang-py">
{literal}
#
# BUCK
#
# For all of the following examples, assume this BUCK file exists in
# the `examples` directory.
#
java_library(
  name = 'one',
  srcs = [ '1.txt' ],
  deps = [
    ':two',
    ':three',
  ],
)

java_library(
  name = 'two',
  srcs = [ '2.txt' ],
  deps = [
    ':four',
  ],
)

java_library(
  name = 'three',
  srcs = [ '3.txt' ],
  deps = [
    ':four',
    ':five',
  ],
)

java_library(
  name = 'four',
  srcs = [ '4.txt' ],
  deps = [
    ':five',
  ],
)

java_library(
  name = 'five',
  srcs = [ '5.txt' ],
)
{/literal}
</pre>
</p>

<p>
List all of the source files used to build the <code>one</code> library
</p>

<p>
<pre>
{literal}
buck audit input /&#x2F;examples:one
{/literal}
</pre>
</p>

<p>
<pre>
{literal}
examples/1.txt
examples/2.txt
examples/3.txt
examples/4.txt
examples/5.txt
{/literal}
</pre>
</p>

<p>
Output a JSON representation of all of the source files used to build the{sp}
<code>two</code> library. In this JSON object, each key is a build target and
each value is an array of the source paths used to build that rule.
</p>

<p>
<pre>
{literal}
buck audit input --json /&#x2F;examples:two
{/literal}
</pre>
</p>

<p>
<pre class="prettyprint lang-js">
{literal}
{
  "//examples:two": ["examples/2.txt"],
  "//examples:four": ["examples/4.txt"],
  "//examples:five": ["examples/5.txt"],
}
{/literal}
</pre>
</p>

<p>
List all of the rules that the <code>one</code> library directly depends on
</p>

<p>
<pre>
{literal}
buck audit dependencies /&#x2F;examples:one
{/literal}
</pre>
</p>

<p>
<pre>
{literal}
//examples:three
//examples:two
{/literal}
</pre>
</p>

<p>
List all of the rules that the <code>one</code> library transitively depends on
</p>

<p>
<pre>
{literal}
buck audit dependencies --transitive /&#x2F;examples:one
{/literal}
</pre>
</p>

<p>
<pre>
{literal}
//examples:five
//examples:four
//examples:three
//examples:two
{/literal}
</pre>
</p>

<p>
Output a JSON representation of all of the rules that the <code>two</code>{sp}
library transitively depends on.
</p>

<p>
<pre>
{literal}
buck audit dependencies --transitive --json /&#x2F;examples:two
{/literal}
</pre>
</p>

<p>
<pre class="prettyprint lang-js">
{literal}
{
  "//examples:two": ["//examples:five","//examples:four"]
}
{/literal}
</pre>
</p>

<p>
Output a JSON representation of the direct dependencies of the{sp}
<code>two</code> and <code>three</code> libraries.
</p>

<p>
<pre>
{literal}
buck audit dependencies --json /&#x2F;examples:two /&#x2F;examples:three
{/literal}
</pre>
</p>

<p>
<pre class="prettyprint lang-js">
{literal}
{
  "//examples:three": ["//examples:five","//examples:four"],
  "//examples:two": ["//examples:four"]
}
{/literal}
</pre>
</p>

{/param}

{/call}


<h2>See also</h2>

<p>
<ul>
<li>{call buck.concept_link}{param page: 'build_file' /}{param name: 'Build File' /}{/call}</li>
<li>{call buck.buckconfig_link /}</li>
</ul>
</p>


    {/param}  // content
  {/call} // buck.page
{/template}

