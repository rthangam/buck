/*
 * Copyright 2018-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
{namespace buck.targets}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'buck targets' /}
    {param navid: 'command_targets' /}
    {param description}
      A command that lists all the available build targets in the current
      project.
    {/param}
    {param content}


{call buck.command}
{param overview}
<p>
List information about the build targets in the current project.
</p>

<p>
<pre>
buck targets &lt;{call buck.build_target /}> | &lt;{call buck.build_target_pattern /}> ...
</pre>
</p>

<p>
The <code>buck targets</code> command must take at least one parameter:
a {call buck.build_target /} or {call buck.build_target_pattern /} or a
combination of these.
</p>

<p>
The following prints all build targets in the project (sorted
alphabetically) to standard out:
</p>

<p>
<pre>
{literal}
buck targets //...
{/literal}
</pre>
</p>

<p>
You can pass a list of targets to <code>buck targets</code>, and Buck
prints information only for those targets. For example, the following
command line prints the target <code>main</code> from 
the <code>BUCK</code> file in the root of the Buck project and all the
targets from the <code>BUCK</code> file in the subdirectory <code>myclass</code>.
</p>

<p>
<pre>
{literal}
buck targets //:main //myclass:
{/literal}
</pre>
</p>

<p>
The <code>buck targets</code> command is commonly used with 
the <code>--show-output</code> option to obtain the output paths for the
build artifacts for Buck targets.
</p>

<p>
<pre>
{literal}
buck targets --show-output &#x2F;/java/com/myproject:binary
> &#x2F;/java/com/myproject:binary buck-out/gen/java/com/myproject/binary.apk
{/literal}
</pre>
</p>


{/param}


{param params}
{call buck.param}
  {param name: 'type' /}
  {param desc}
  <p>
    The types of target by which to filter.  For example:
  </p>

<p>
<pre>
{literal}
buck targets &#x2F;/java/com/myproject/... --type java_test java_binary
{/literal}
</pre>
</p>

<p>
Note that the <code>--type</code> parameter comes <em>after</em> the
specified targets.
</p>

<p>
This parameter can be handy in programmatic tasks, such as running all of
the Java tests under <code>&#x2F;/java/com/myproject</code>:
</p>

<p>
<pre>
{literal}
buck targets &#x2F;/java/com/myproject/... --type java_test | xargs buck test
{/literal}
</pre>
</p>


  {/param}
{/call}


{call buck.param}
  {param name: 'referenced-file' /}
  {param desc}

  <p>
  Filters targets by the list of rules that include the specified file
  in their transitive closure.
  </p>

  <p>
  For example, to run all tests that could be affected by a particular
  file, you could use:
  </p>

<p>
<pre>
{literal}
buck targets &#x2F;/java/com/myproject/... --type java_test \
  --referenced-file java/com/example/Foo.java |
  xargs buck test
{/literal}
</pre>
</p>

  {/param}
{/call}


{call buck.param}
  {param name: 'json' /}
  {param desc}

  <p>
  Print a JSON representation of each target.
  </p>

  <p>
  In addition, the JSON includes a list of <code>direct_dependencies</code> for 
  each target, which may include additional dependencies for targets
  whose descriptions implement <code>ImplicitDepsInferringDescription</code>. The
  fully qualified names of targets are given.
  </p>

  <p>
  For example, when resolving a genrule, the direct dependencies
  includes both the build targets in <code>deps</code> as well as any
  build targets in a script associated with the genrule.
  </p>

  {/param}
{/call}


{call buck.param}
  {param name: 'output-attributes' /}
  {param desc}

  <p>
  Specify the attributes used in the JSON representation.
  </p>

  <p>
  If you omit this option, Buck shows all attributes.
  </p>

  {/param}
{/call}


{call buck.param}
  {param name: 'print0' /}
  {param desc}
  <p>
  Delimit targets using the ASCII NUL character if <code>--json</code> is not specified.
  This facilitates use with <code>xargs</code>:
  </p>

<p>
<pre>
{literal}
buck targets --print0 | xargs -0 buck build
{/literal}
</pre>
</p>

  {/param}
{/call}


{call buck.param}
  {param name: 'resolve-alias' /}
  {param desc}

  <p>
  Print the fully-qualified build target for the specified alias[es]. 
  This command also accepts build targets. For more information, 
  see {call buckconfig.alias /} in the <code>.buckconfig</code> documentation.
  </p>

  {/param}
{/call}


{call command_common.show_output_param /}


{call buck.param}
  {param name: 'show-rulekey' /}
  {param desc}

  <p>
  Print the {call buck.concept_link}{param page: 'rule_keys' /}{param name: 'rule keys' /}{/call},
  for the specified targets. 
  </p>

  <p>
  For example, if you have a rule named <code>main</code> defined in the
  build file in your current directory, the following command prints its
  rule key.
  </p>

<p>
<pre>
{literal}
buck targets --show-rulekey ':main'
{/literal}
</pre>
</p>

  <p>
  Note that the rule key for a target is different from the <em>target hash</em> for 
  that target.  (See <code>show-target-hash</code> below.) Further,
  the inputs for the computation of the rule key are <em>not</em> a
  superset of the inputs for the target hash. For example, the value of 
  the {call buck.concept_link}{param page: 'Visibility' /}{param name: 'visibility' /}{/call} argument <em>is not</em> an 
  input for the rule key but <em>is</em> an input for the target hash. 
  </p>

  {/param} 
{/call} 


{call buck.param}
  {param name: 'show-transitive-rulekeys' /}
  {param desc}

  <p>
  When specified in conjunction with <code>--show-rulekey</code>, 
  prints the {call buck.concept_link}{param page: 'rule_keys' /}{param name: 'rule keys' /}{/call} for 
  the specified targets <em>and their transitive closure</em>. 
  </p>

  <p>
  For example, if you have a rule named <code>main</code> defined in the
  build file in your current directory, the following command prints the
  rule key for that rule and the rule keys for all of the rules that are
  in its transitive closure.
  </p>

<p>
<pre>
{literal}
buck targets --show-rulekey --show-transitive-rulekeys ':main'
{/literal}
</pre>
</p>

  {/param}
{/call}


{call buck.param}
  {param name: 'show-target-hash' /}
  {param desc}

  <p>
  Print each rule's target hash after the rule's name. Target hashes can
  be used to detect which targets are affected when source files in BUCK
  files change: if a target is affected, its target hash will be
  different after the change from what it was before.
  </p>

  <p>
  A target hash is created by finding all the transitive dependencies of
  the given target and hashing all their attributes and the files they
  reference. For more details about how the referenced files are hashed
  see the {sp} <code>--target-hash-file-mode</code> flag. <em>The format
  of the data that is hashed is undocumented and can change between Buck
  versions.</em> 
  </p>

  {/param}
{/call}


{call buck.param}
  {param name: 'target-hash-file-mode' /}
  {param desc}

  <p>
  Modify how target hashes are computed. 
  </p>

  <p>
  Can be set to either <code>PATHS_AND_CONTENTS</code> or {sp}<code>PATHS_ONLY</code>. 
  </p>

  <p>
  If set to <code>PATHS_AND_CONTENTS</code> (the default), the contents of
  all files referenced from the targets will be used to compute the target hash. 
  </p>

  <p>
  If set to {sp} <code>PATHS_ONLY</code>, only files' paths contribute to the 
  hash. <code>PATHS_ONLY</code> will generally be faster because it does not 
  need to read all of the referenced files, but it will not detect file
  changes automatically. See <code>--target-hash-modified-paths</code> for 
  another way to handle changes to referenced files without losing
  the performance benefits.
  </p>

  {/param}
{/call}

{call buck.param}
  {param name: 'target-hash-modified-paths' /}
  {param desc}

  <p>
  Modify how target hashes are computed. 
  </p>

  <p>
  If a target or its dependencies reference a file from the specified set of
  paths, the target's hash will be different than if this option had
  been omitted. Otherwise, the target's hash will be the same as if this
  option was omitted. 
  </p>

  <p>
  This option can be used to detect changes in referenced files if the
  list of modified files is available from an external source, such as a
  source control system.
  </p>

  <p>
  This option is effective only when {sp} <code>--target-hash-file-mode</code> is 
  set to <code>PATHS_ONLY</code>. Otherwise, the actual contents of the
  files are used to detect modifications and this option is ignored. 
  </p>

  {/param}
{/call}

  {/param}
{/call}

    {/param}  // content
  {/call} // buck.page
{/template}
