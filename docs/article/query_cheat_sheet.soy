/*
 * Copyright 2018-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
{namespace buck.query_cheat_sheet}

/**
 * @param id attribute for this blob of HTML so users can link to an individual FAQ. We should make
 *     an effort to keep these identifiers stable to avoid breaking links. Therefore, when choosing
 *     an id, try to make it generic enough so that it is forward-compatible.
 * @param question Question.
 * @param shortAnswer Try to keep this to a one-liner.
 * @param? longAnswer This portion of the answer can include more detail.
 */
{template .faq}
<div class="{css faq}" id="{$id|id}">
  <div class="{css faq_q}">{$question|noAutoescape}</div>
  <div class="{css faq_a}">
    {$shortAnswer|noAutoescape}
    {if $longAnswer}
      <p>{$longAnswer|noAutoescape}</p>
    {/if}
  </div>
</div>
{/template}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'Buck Cheat Sheet' /}
    {param navid: 'article_query_cheat_sheet' /}
    {param prettify: true /}
    {param description}
      Most common use cases of buck query.
    {/param}
    {param content}

    <p>
    This section provides example command lines that you can use to
    obtain information about Buck and about your build. These techniques
    can help you to understand how your build works and to troubleshoot
    issues with your build.
    </p>

    <p>
    Most of these examples use the {call buck.cmd_query /}, {call buck.cmd_targets /},
    and {call buck.cmd_audit /} commands.  For more information and examples,
    see the reference pages for those commands.
    </p>

<hr/>

<ul style="line-height:0.5em">
  <li>

    <a href="#list-all-rules">
      How do I get a list of all the rules that Buck supports from the
      command line?
    </a>
  </li>

  <li>
    <a href="#list-args-for-rule">
      How do I see the arguments for a given rule from the command line?
    </a>
  </li>

  <li>
    <a href="#find-existing-targets">
      How do I find all the targets for a package?
    </a>
  </li>

  <li>
    <a href="#query-multiple-targets">
      How do I specify more than one target to <code>buck query</code>?
    </a>
  </li>

  <li>
    <a href="#output-target-attributes">
      How do I get the attribute names and values for the targets that
      result from a query?
    </a>
  </li>

  <li>
    <a href="#queries-in-rules">
      How do I perform a query <em>inside</em> of a rule?
    </a>
  </li>

  <li>
    <a href="#find-dependencies">
      How do I find the dependencies for a target?
    </a>
  </li>

  <li>
    <a href="#find-buildfile-owner">
      How do I find the buildfile that contains the target that owns a
      source file?
    </a>
  </li>
</ul>

<hr><br/>


{call .faq}
  {param id: 'list-all-rules' /}
  {param question}
    <p>
      How do I get a list of all the rules that Buck supports, <em>from
      the command line</em>, so that I can process them
      with <code>grep</code>, <code>sed</code>, etc?
    </p>
  {/param}

  {param shortAnswer}
    <p>
      Use {call buck.cmd_audit /} with the <code>ruletypes</code> (plural)
      subcommand, which returns an alphabetized list of all the
      rules that Buck supports.
    </p>

{call buckaudit.example_ruletypes /}

  {/param}
{/call}


{call .faq}
  {param id: 'list-args-for-rule' /}
  {param question}
    <p>
      How do I see the arguments for a rule from the command line?
    </p>
  {/param}

  {param shortAnswer}
    <p>
      Use {call buck.cmd_audit /} with the <code>ruletype</code> (singular)
      subcommand followed by the name of the rule.
    </p>

{call buckaudit.example_ruletype /}

  {/param}
{/call}

{call .faq}
  {param id: 'find-existing-targets' /}
  {param question}
    <p>
      How do I find all the targets for a package?
    </p>
  {/param}
  {param shortAnswer}
    <p>
      Specify a <em>build target pattern</em> that represents the targets
      in the package.
    </p>
<p>
<pre class="prettyprint lang-js">
{literal}
buck query //path/to/dir/...
{/literal}
</pre>
</p>

  {/param}
  {param longAnswer}
    <p>
      The <code>buck query</code> command can accept a {call buck.build_target_pattern /} as a
      parameter. If you specify a build target pattern, Buck evaluates this
      pattern and shows all the build targets that match it.
    </p>
  {/param}
{/call}

{call .faq}
  {param id: 'query-multiple-targets' /}
  {param question}
    <p>
      How do I specify more than one target to <code>buck query</code>?
    </p>
  {/param}

  {param shortAnswer}
  Use the {call buckquery.set /} operator.
  {call buckquery.example_multiple_targets /}
  {/param}

{/call}

{call .faq}
  {param id: 'output-target-attributes' /}
  {param question}
    <p>
      How do I get the attribute names and values for the targets
      returned by a query?
    </p>
  {/param}
  {param shortAnswer}
    <p>
      Add the <code>--output-attributes</code> option to the command
      line, followed by regular expressions that represent the
      attributes of interest.
    </p>

<p>
<pre class="prettyprint lang-js">
{literal}
buck query "deps(//foo:bar)" --output-attributes 'name' 'exported_headers'
{/literal}
</pre>
</p>
  {/param}

  {param longAnswer}
    <p>
      The <code>--output-attributes</code> option enables you to specify
      which attributes Buck should return. Instead of returning the names of the targets that match
      the query expression, Buck returns the names and values of the specified attributes for
      those targets in JSON format. Attributes are specified as regular expressions.
      For example, <code>'.*'</code> matches all attributes. See the {sp}
      <a href="{ROOT}command/query.html#output-attributes">buck query
      page</a> {sp}for more details. The output for the example query
      above might look something like the following.
    </p>

<p>
<pre class="prettyprint lang-js">
{literal}
{
  "//foo/bar/lib:lib" : {
    "exported_headers" : [ "App/util.h" ],
    "name" : "lib"
  },
  "//foo/bar:app" : {
    "exported_headers" : [ "App/lib.h" ],
    "name" : "app"
  }
}
{/literal}
</pre>
</p>

  {/param}
{/call}


{call .faq}
  {param id: 'queries-in-rules' /}
  {param question}
    <p>
      How do I perform a query <em>inside</em> of a rule?
    </p>
  {/param}

  {param shortAnswer}
    <p>
      Use <strong>{call buck.string_parameter_macros /}</strong>,
      specifically, the <em>query</em> macros:
    </p>

<p>
<pre>
{literal}
$(query_targets "queryfunction(//:foo)")
$(query_outputs "queryfunction(//:foo)")
$(query_targets_and_outputs [SEPARATOR] "queryfunction(//:foo)")
{/literal}
</pre>
</p>

    <p>
      Note, however, that the query macros are supported only
      for {call buck.genrule /} and {call buck.apk_genrule /}.
    </p>
  {/param}

{/call}


{call .faq}
  {param id: 'find-dependencies' /}
  {param question}
    <p>
      How do I find the dependencies for a target?
    </p>
  {/param}
  {param shortAnswer}

    <p>
      Use the <code>deps()</code> operator.
    </p>

<p>
<pre class="prettyprint lang-js">
{literal}
buck query "deps('//foo:bar')"
buck query "deps('//foo:bar', 1, first_order_deps())"
buck query "deps(set('//foo:bar' '//foo:lib' '//foo/baz:util'))"
{/literal}
</pre>
</p>

  {/param}

  {param longAnswer}
    <p>
      The <a href="{ROOT}command/query.html#deps">deps</a> operator finds
      the dependencies of the specified targets. The first argument
      represents the targets of interest. This can be a
      single {call buck.build_target /} or {call buck.build_target_pattern /},
      or a set of these.
    </p>

    <p>
      The optional second argument is the <em>depth</em> of the search for
      dependencies from the specified targets. For example, <code>1</code>,
      as shown in the example above, returns only the direct dependencies.
      If you do not provide this argument, the output is the complete
      set of transitive dependencies.
    </p>
  {/param}
{/call}


{call .faq}
  {param id: 'find-buildfile-owner' /}
  {param question}
    <p>
      How do I find the buildfile that contains the target that owns a
      source file?
    </p>
  {/param}

  {param shortAnswer}
  {call buckquery.example_buildfile_owner /}
  {/param}

{/call}

    {/param}
  {/call}
{/template}

